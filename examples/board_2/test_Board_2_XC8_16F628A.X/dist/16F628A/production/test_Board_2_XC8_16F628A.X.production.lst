

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 13 22:15:43 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.45
    37                           ; Generated 16/11/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F628A Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  008C                     	;# 
    98  008E                     	;# 
    99  0092                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009A                     	;# 
   103  009B                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009F                     	;# 
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000E                     	;# 
   118  000E                     	;# 
   119  000F                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0017                     	;# 
   127  0018                     	;# 
   128  0019                     	;# 
   129  001A                     	;# 
   130  001F                     	;# 
   131  0081                     	;# 
   132  0085                     	;# 
   133  0086                     	;# 
   134  008C                     	;# 
   135  008E                     	;# 
   136  0092                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009A                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009F                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000E                     	;# 
   155  000E                     	;# 
   156  000F                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0015                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  008C                     	;# 
   172  008E                     	;# 
   173  0092                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009A                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009F                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  000A                     	;# 
   189  000B                     	;# 
   190  000C                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0015                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001F                     	;# 
   205  0081                     	;# 
   206  0085                     	;# 
   207  0086                     	;# 
   208  008C                     	;# 
   209  008E                     	;# 
   210  0092                     	;# 
   211  0098                     	;# 
   212  0099                     	;# 
   213  009A                     	;# 
   214  009B                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009F                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000E                     	;# 
   229  000E                     	;# 
   230  000F                     	;# 
   231  0010                     	;# 
   232  0011                     	;# 
   233  0012                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  008C                     	;# 
   246  008E                     	;# 
   247  0092                     	;# 
   248  0098                     	;# 
   249  0099                     	;# 
   250  009A                     	;# 
   251  009B                     	;# 
   252  009C                     	;# 
   253  009D                     	;# 
   254  009F                     	;# 
   255                           
   256                           	psect	stringtext
   257  0400                     __pstringtext:	
   258  0400                     stringtab:	
   259  0400                     __stringtab:	
   260                           
   261                           ;	String table - string pointers are 2 bytes each
   262  0400  1BFF               	btfsc	btemp+1,7
   263  0401  2C0A               	ljmp	stringcode
   264  0402  1383               	bcf	3,7
   265  0403  187F               	btfsc	btemp+1,0
   266  0404  1783               	bsf	3,7
   267  0405  0800               	movf	0,w
   268  0406  0A84               	incf	4,f
   269  0407  1903               	skipnz
   270  0408  0AFF               	incf	btemp+1,f
   271  0409  0008               	return
   272  040A                     stringcode:	
   273  040A  087F               	movf	btemp+1,w
   274  040B  397F               	andlw	127
   275  040C  008A               	movwf	10
   276  040D  0804               	movf	4,w
   277  040E  0A84               	incf	4,f
   278  040F  1903               	skipnz
   279  0410  0AFF               	incf	btemp+1,f
   280  0411  0082               	movwf	2
   281  0412                     __stringbase:	
   282  0412                     __end_of__stringtab:	
   283  0412                     _linha:	
   284  0412  3402               	retlw	2
   285  0413  3404               	retlw	4
   286  0414  3440               	retlw	64
   287  0415  3480               	retlw	128
   288  0416                     __end_of_linha:	
   289  0006                     _PORTB	set	6
   290  001F                     _CMCON	set	31
   291  0005                     _PORTA	set	5
   292  001A                     _RCREG	set	26
   293  000C                     _PIR1bits	set	12
   294  0018                     _RCSTAbits	set	24
   295  0019                     _TXREG	set	25
   296  002A                     _RA2	set	42
   297  0029                     _RA1	set	41
   298  0035                     _RB5	set	53
   299  0036                     _RB6	set	54
   300  0037                     _RB7	set	55
   301  00C4                     _CREN	set	196
   302  00C6                     _RX9	set	198
   303  00C7                     _SPEN	set	199
   304  0028                     _RA0	set	40
   305  0033                     _RB3	set	51
   306  0034                     _RB4	set	52
   307  002C                     _RA4	set	44
   308  002B                     _RA3	set	43
   309  0086                     _TRISB	set	134
   310  0085                     _TRISA	set	133
   311  0099                     _SPBRG	set	153
   312  04C1                     _TRMT	set	1217
   313  04C2                     _BRGH	set	1218
   314  04C4                     _SYNC	set	1220
   315  04C5                     _TXEN	set	1221
   316  04C6                     _TX9	set	1222
   317  042C                     _TRISA4	set	1068
   318  0416                     STR_16:	
   319  0416  340D               	retlw	13
   320  0417  340A               	retlw	10
   321  0418  3420               	retlw	32	;' '
   322  0419  3450               	retlw	80	;'P'
   323  041A  3469               	retlw	105	;'i'
   324  041B  3463               	retlw	99	;'c'
   325  041C  3473               	retlw	115	;'s'
   326  041D  3469               	retlw	105	;'i'
   327  041E  346D               	retlw	109	;'m'
   328  041F  346C               	retlw	108	;'l'
   329  0420  3461               	retlw	97	;'a'
   330  0421  3462               	retlw	98	;'b'
   331  0422  340D               	retlw	13
   332  0423  340A               	retlw	10
   333  0424  3420               	retlw	32	;' '
   334  0425  3454               	retlw	84	;'T'
   335  0426  3465               	retlw	101	;'e'
   336  0427  3473               	retlw	115	;'s'
   337  0428  3474               	retlw	116	;'t'
   338  0429  3465               	retlw	101	;'e'
   339  042A  3420               	retlw	32	;' '
   340  042B  3453               	retlw	83	;'S'
   341  042C  3465               	retlw	101	;'e'
   342  042D  3472               	retlw	114	;'r'
   343  042E  3469               	retlw	105	;'i'
   344  042F  3461               	retlw	97	;'a'
   345  0430  346C               	retlw	108	;'l'
   346  0431  3420               	retlw	32	;' '
   347  0432  3454               	retlw	84	;'T'
   348  0433  3458               	retlw	88	;'X'
   349  0434  340D               	retlw	13
   350  0435  340A               	retlw	10
   351  0436  3400               	retlw	0
   352  0437                     STR_6:	
   353  0437  3454               	retlw	84	;'T'
   354  0438  3465               	retlw	101	;'e'
   355  0439  3473               	retlw	115	;'s'
   356  043A  3474               	retlw	116	;'t'
   357  043B  3465               	retlw	101	;'e'
   358  043C  3420               	retlw	32	;' '
   359  043D  3445               	retlw	69	;'E'
   360  043E  3445               	retlw	69	;'E'
   361  043F  3450               	retlw	80	;'P'
   362  0440  3452               	retlw	82	;'R'
   363  0441  344F               	retlw	79	;'O'
   364  0442  344D               	retlw	77	;'M'
   365  0443  3420               	retlw	32	;' '
   366  0444  3445               	retlw	69	;'E'
   367  0445  3458               	retlw	88	;'X'
   368  0446  3454               	retlw	84	;'T'
   369  0447  3400               	retlw	0
   370  0448                     STR_21:	
   371  0448  3454               	retlw	84	;'T'
   372  0449  3465               	retlw	101	;'e'
   373  044A  3473               	retlw	115	;'s'
   374  044B  3474               	retlw	116	;'t'
   375  044C  3465               	retlw	101	;'e'
   376  044D  3420               	retlw	32	;' '
   377  044E  3454               	retlw	84	;'T'
   378  044F  3465               	retlw	101	;'e'
   379  0450  3463               	retlw	99	;'c'
   380  0451  346C               	retlw	108	;'l'
   381  0452  3461               	retlw	97	;'a'
   382  0453  3464               	retlw	100	;'d'
   383  0454  346F               	retlw	111	;'o'
   384  0455  3420               	retlw	32	;' '
   385  0456  3454               	retlw	84	;'T'
   386  0457  3458               	retlw	88	;'X'
   387  0458  3400               	retlw	0
   388  0459                     STR_18:	
   389  0459  3454               	retlw	84	;'T'
   390  045A  3465               	retlw	101	;'e'
   391  045B  3473               	retlw	115	;'s'
   392  045C  3474               	retlw	116	;'t'
   393  045D  3465               	retlw	101	;'e'
   394  045E  3420               	retlw	32	;' '
   395  045F  3453               	retlw	83	;'S'
   396  0460  3465               	retlw	101	;'e'
   397  0461  3472               	retlw	114	;'r'
   398  0462  3469               	retlw	105	;'i'
   399  0463  3461               	retlw	97	;'a'
   400  0464  346C               	retlw	108	;'l'
   401  0465  3420               	retlw	32	;' '
   402  0466  3452               	retlw	82	;'R'
   403  0467  3458               	retlw	88	;'X'
   404  0468  3400               	retlw	0
   405  0469                     STR_14:	
   406  0469  3454               	retlw	84	;'T'
   407  046A  3465               	retlw	101	;'e'
   408  046B  3473               	retlw	115	;'s'
   409  046C  3474               	retlw	116	;'t'
   410  046D  3465               	retlw	101	;'e'
   411  046E  3420               	retlw	32	;' '
   412  046F  3453               	retlw	83	;'S'
   413  0470  3465               	retlw	101	;'e'
   414  0471  3472               	retlw	114	;'r'
   415  0472  3469               	retlw	105	;'i'
   416  0473  3461               	retlw	97	;'a'
   417  0474  346C               	retlw	108	;'l'
   418  0475  3420               	retlw	32	;' '
   419  0476  3454               	retlw	84	;'T'
   420  0477  3458               	retlw	88	;'X'
   421  0478  3400               	retlw	0
   422  0479                     STR_7:	
   423  0479  3454               	retlw	84	;'T'
   424  047A  3465               	retlw	101	;'e'
   425  047B  3473               	retlw	115	;'s'
   426  047C  3474               	retlw	116	;'t'
   427  047D  3461               	retlw	97	;'a'
   428  047E  3472               	retlw	114	;'r'
   429  047F  3420               	retlw	32	;' '
   430  0480  3428               	retlw	40	;'('
   431  0481  3431               	retlw	49	;'1'
   432  0482  342F               	retlw	47	;'/'
   433  0483  3430               	retlw	48	;'0'
   434  0484  3429               	retlw	41	;')'
   435  0485  3420               	retlw	32	;' '
   436  0486  343F               	retlw	63	;'?'
   437  0487  3400               	retlw	0
   438  0488                     STR_22:	
   439  0488  340D               	retlw	13
   440  0489  340A               	retlw	10
   441  048A  3420               	retlw	32	;' '
   442  048B  3441               	retlw	65	;'A'
   443  048C  3467               	retlw	103	;'g'
   444  048D  3475               	retlw	117	;'u'
   445  048E  3461               	retlw	97	;'a'
   446  048F  3472               	retlw	114	;'r'
   447  0490  3464               	retlw	100	;'d'
   448  0491  3465               	retlw	101	;'e'
   449  0492  3421               	retlw	33	;'!'
   450  0493  340D               	retlw	13
   451  0494  340A               	retlw	10
   452  0495  3400               	retlw	0
   453  0496                     STR_25:	
   454  0496  3450               	retlw	80	;'P'
   455  0497  3472               	retlw	114	;'r'
   456  0498  3465               	retlw	101	;'e'
   457  0499  3473               	retlw	115	;'s'
   458  049A  3473               	retlw	115	;'s'
   459  049B  3469               	retlw	105	;'i'
   460  049C  346F               	retlw	111	;'o'
   461  049D  346E               	retlw	110	;'n'
   462  049E  3465               	retlw	101	;'e'
   463  049F  3420               	retlw	32	;' '
   464  04A0  3452               	retlw	82	;'R'
   465  04A1  3453               	retlw	83	;'S'
   466  04A2  3454               	retlw	84	;'T'
   467  04A3  3400               	retlw	0
   468  04A4                     STR_5:	
   469  04A4  3454               	retlw	84	;'T'
   470  04A5  3465               	retlw	101	;'e'
   471  04A6  3473               	retlw	115	;'s'
   472  04A7  3474               	retlw	116	;'t'
   473  04A8  3465               	retlw	101	;'e'
   474  04A9  3420               	retlw	32	;' '
   475  04AA  3454               	retlw	84	;'T'
   476  04AB  3465               	retlw	101	;'e'
   477  04AC  3463               	retlw	99	;'c'
   478  04AD  346C               	retlw	108	;'l'
   479  04AE  3461               	retlw	97	;'a'
   480  04AF  3464               	retlw	100	;'d'
   481  04B0  346F               	retlw	111	;'o'
   482  04B1  3400               	retlw	0
   483  04B2                     STR_17:	
   484  04B2  3420               	retlw	32	;' '
   485  04B3  3450               	retlw	80	;'P'
   486  04B4  3469               	retlw	105	;'i'
   487  04B5  3463               	retlw	99	;'c'
   488  04B6  3473               	retlw	115	;'s'
   489  04B7  3469               	retlw	105	;'i'
   490  04B8  346D               	retlw	109	;'m'
   491  04B9  344C               	retlw	76	;'L'
   492  04BA  3461               	retlw	97	;'a'
   493  04BB  3462               	retlw	98	;'b'
   494  04BC  340D               	retlw	13
   495  04BD  340A               	retlw	10
   496  04BE  3400               	retlw	0
   497  04BF                     STR_12:	
   498  04BF  3454               	retlw	84	;'T'
   499  04C0  3465               	retlw	101	;'e'
   500  04C1  3473               	retlw	115	;'s'
   501  04C2  3474               	retlw	116	;'t'
   502  04C3  3465               	retlw	101	;'e'
   503  04C4  3420               	retlw	32	;' '
   504  04C5  3453               	retlw	83	;'S'
   505  04C6  3465               	retlw	101	;'e'
   506  04C7  3472               	retlw	114	;'r'
   507  04C8  3469               	retlw	105	;'i'
   508  04C9  3461               	retlw	97	;'a'
   509  04CA  346C               	retlw	108	;'l'
   510  04CB  3400               	retlw	0
   511  04CC                     STR_19:	
   512  04CC  3420               	retlw	32	;' '
   513  04CD  3444               	retlw	68	;'D'
   514  04CE  3469               	retlw	105	;'i'
   515  04CF  3467               	retlw	103	;'g'
   516  04D0  3469               	retlw	105	;'i'
   517  04D1  3474               	retlw	116	;'t'
   518  04D2  3465               	retlw	101	;'e'
   519  04D3  3421               	retlw	33	;'!'
   520  04D4  340D               	retlw	13
   521  04D5  340A               	retlw	10
   522  04D6  3400               	retlw	0
   523  04D7                     STR_4:	
   524  04D7  3454               	retlw	84	;'T'
   525  04D8  3465               	retlw	101	;'e'
   526  04D9  3473               	retlw	115	;'s'
   527  04DA  3474               	retlw	116	;'t'
   528  04DB  3465               	retlw	101	;'e'
   529  04DC  3420               	retlw	32	;' '
   530  04DD  344C               	retlw	76	;'L'
   531  04DE  3445               	retlw	69	;'E'
   532  04DF  3444               	retlw	68	;'D'
   533  04E0  3473               	retlw	115	;'s'
   534  04E1  3400               	retlw	0
   535  04E2                     STR_26:	
   536  04E2  340D               	retlw	13
   537  04E3  340A               	retlw	10
   538  04E4  3420               	retlw	32	;' '
   539  04E5  3446               	retlw	70	;'F'
   540  04E6  3449               	retlw	73	;'I'
   541  04E7  344D               	retlw	77	;'M'
   542  04E8  3421               	retlw	33	;'!'
   543  04E9  340D               	retlw	13
   544  04EA  340A               	retlw	10
   545  04EB  3400               	retlw	0
   546  04EC                     STR_11:	
   547  04EC  3454               	retlw	84	;'T'
   548  04ED  3465               	retlw	101	;'e'
   549  04EE  3473               	retlw	115	;'s'
   550  04EF  3474               	retlw	116	;'t'
   551  04F0  3465               	retlw	101	;'e'
   552  04F1  3420               	retlw	32	;' '
   553  04F2  3452               	retlw	82	;'R'
   554  04F3  3454               	retlw	84	;'T'
   555  04F4  3443               	retlw	67	;'C'
   556  04F5  3400               	retlw	0
   557  04F6                     STR_1:	
   558  04F6  3454               	retlw	84	;'T'
   559  04F7  3465               	retlw	101	;'e'
   560  04F8  3473               	retlw	115	;'s'
   561  04F9  3474               	retlw	116	;'t'
   562  04FA  3465               	retlw	101	;'e'
   563  04FB  3420               	retlw	32	;' '
   564  04FC  344C               	retlw	76	;'L'
   565  04FD  3443               	retlw	67	;'C'
   566  04FE  3444               	retlw	68	;'D'
   567  04FF  3400               	retlw	0
   568  0500                     STR_10:	
   569  0500  3420               	retlw	32	;' '
   570  0501  3420               	retlw	32	;' '
   571  0502  3420               	retlw	32	;' '
   572  0503  3420               	retlw	32	;' '
   573  0504  3420               	retlw	32	;' '
   574  0505  3445               	retlw	69	;'E'
   575  0506  3452               	retlw	82	;'R'
   576  0507  3452               	retlw	82	;'R'
   577  0508  344F               	retlw	79	;'O'
   578  0509  3400               	retlw	0
   579  050A                     STR_15:	
   580  050A  3439               	retlw	57	;'9'
   581  050B  3436               	retlw	54	;'6'
   582  050C  3430               	retlw	48	;'0'
   583  050D  3430               	retlw	48	;'0'
   584  050E  3420               	retlw	32	;' '
   585  050F  3438               	retlw	56	;'8'
   586  0510  344E               	retlw	78	;'N'
   587  0511  3431               	retlw	49	;'1'
   588  0512  3400               	retlw	0
   589  0513                     STR_9:	
   590  0513  3420               	retlw	32	;' '
   591  0514  3420               	retlw	32	;' '
   592  0515  3420               	retlw	32	;' '
   593  0516  3420               	retlw	32	;' '
   594  0517  3420               	retlw	32	;' '
   595  0518  344F               	retlw	79	;'O'
   596  0519  344B               	retlw	75	;'K'
   597  051A  3400               	retlw	0
   598  051B                     STR_24:	
   599  051B  3446               	retlw	70	;'F'
   600  051C  3469               	retlw	105	;'i'
   601  051D  346D               	retlw	109	;'m'
   602  051E  3400               	retlw	0
   603  051F                     STR_3:	
   604  051F  344F               	retlw	79	;'O'
   605  0520  346B               	retlw	107	;'k'
   606  0521  3400               	retlw	0
   607  04E9                     
   608                           ; #config settings
   609  0000                     
   610                           	psect	cinit
   611  07F9                     start_initialization:	
   612  07F9                     __initialization:	
   613                           
   614                           ; Clear objects allocated to BANK0
   615  07F9  1383               	bcf	3,7	;select IRP bank0
   616  07FA  3020               	movlw	low __pbssBANK0
   617  07FB  0084               	movwf	4
   618  07FC  3034               	movlw	low (__pbssBANK0+20)
   619  07FD  20F8               	fcall	clear_ram0
   620  07FE                     end_of_initialization:	
   621                           ;End of C runtime variable initialization code
   622                           
   623  07FE                     __end_of__initialization:	
   624  07FE  0183               	clrf	3
   625  07FF  2D89               	ljmp	_main	;jump to C main() function
   626                           
   627                           	psect	bssBANK0
   628  0020                     __pbssBANK0:	
   629  0020                     _time:	
   630  0020                     	ds	10
   631  002A                     _date:	
   632  002A                     	ds	10
   633                           
   634                           	psect	clrtext
   635  00F8                     clear_ram0:	
   636                           ;	Called with FSR containing the base address, and
   637                           ;	W with the last address+1
   638                           
   639  00F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   640  00F9                     clrloop0:	
   641  00F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   642  00FA  0A84               	incf	4,f	;increment pointer
   643  00FB  0604               	xorwf	4,w	;XOR with final address
   644  00FC  1903               	btfsc	3,2	;have we reached the end yet?
   645  00FD  3400               	retlw	0	;all done for this memory range, return
   646  00FE  0604               	xorwf	4,w	;XOR again to restore value
   647  00FF  28F9               	goto	clrloop0	;do the next byte
   648                           
   649                           	psect	cstackCOMMON
   650  0070                     __pcstackCOMMON:	
   651  0070                     ?_i2c_start:	
   652  0070                     ??_i2c_start:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     ?_i2c_wb:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ??_i2c_wb:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ?_i2c_rb:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ??_i2c_rb:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ?_i2c_stop:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ??_i2c_stop:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ?_atraso_ms:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ?_delay:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ??_delay:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_i2c_init:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ??_i2c_init:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_lcd_wr:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ??_lcd_wr:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ?_lcd_cmd:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     ?_lcd_dat:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0070                     ?_lcd_init:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0070                     ?_getd:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ??_getd:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ?_getu:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ??_getu:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_rtc_r:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ?_serial_init:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ??_serial_init:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ?_serial_tx:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ??_serial_tx:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ?_main:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ?___bmul:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     getu@nn:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0070                     serial_tx@val:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0070                     ___bmul@multiplicand:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0070                     atraso_ms@valor:	
   746                           ; 1 bytes @ 0x0
   747                           
   748                           
   749                           ; 2 bytes @ 0x0
   750  0070                     	ds	1
   751  0071                     ?_serial_tx_str:	
   752  0071                     ??___bmul:	
   753                           ; 1 bytes @ 0x1
   754                           
   755  0071                     i2c_wb@val:	
   756                           ; 1 bytes @ 0x1
   757                           
   758  0071                     lcd_wr@val:	
   759                           ; 1 bytes @ 0x1
   760                           
   761  0071                     getd@nn:	
   762                           ; 1 bytes @ 0x1
   763                           
   764  0071                     serial_tx_str@val:	
   765                           ; 1 bytes @ 0x1
   766                           
   767                           
   768                           ; 2 bytes @ 0x1
   769  0071                     	ds	1
   770  0072                     ??_atraso_ms:	
   771  0072                     i2c_wb@i:	
   772                           ; 1 bytes @ 0x2
   773                           
   774  0072                     i2c_rb@ack:	
   775                           ; 1 bytes @ 0x2
   776                           
   777  0072                     lcd_wr@i:	
   778                           ; 1 bytes @ 0x2
   779                           
   780  0072                     ___bmul@product:	
   781                           ; 1 bytes @ 0x2
   782                           
   783                           
   784                           ; 1 bytes @ 0x2
   785  0072                     	ds	1
   786  0073                     ??_serial_tx_str:	
   787  0073                     i2c_rb@ret:	
   788                           ; 1 bytes @ 0x3
   789                           
   790  0073                     ___bmul@multiplier:	
   791                           ; 1 bytes @ 0x3
   792                           
   793  0073                     atraso_ms@i:	
   794                           ; 1 bytes @ 0x3
   795                           
   796                           
   797                           ; 2 bytes @ 0x3
   798  0073                     	ds	1
   799  0074                     i2c_rb@i:	
   800  0074                     serial_tx_str@i:	
   801                           ; 1 bytes @ 0x4
   802                           
   803                           
   804                           ; 1 bytes @ 0x4
   805  0074                     	ds	1
   806  0075                     ?_e2pext_r:	
   807  0075                     ??_rtc_r:	
   808                           ; 1 bytes @ 0x5
   809                           
   810  0075                     atraso_ms@j:	
   811                           ; 1 bytes @ 0x5
   812                           
   813  0075                     e2pext_r@addr:	
   814                           ; 1 bytes @ 0x5
   815                           
   816                           
   817                           ; 2 bytes @ 0x5
   818  0075                     	ds	1
   819  0076                     ??_lcd_cmd:	
   820  0076                     ??_lcd_dat:	
   821                           ; 1 bytes @ 0x6
   822                           
   823  0076                     ?_serial_rx:	
   824                           ; 1 bytes @ 0x6
   825                           
   826  0076                     ?_tc_tecla:	
   827                           ; 1 bytes @ 0x6
   828                           
   829  0076                     lcd_cmd@val:	
   830                           ; 1 bytes @ 0x6
   831                           
   832  0076                     lcd_dat@val:	
   833                           ; 1 bytes @ 0x6
   834                           
   835  0076                     rtc_r@tmp:	
   836                           ; 1 bytes @ 0x6
   837                           
   838  0076                     serial_rx@timeout:	
   839                           ; 1 bytes @ 0x6
   840                           
   841  0076                     tc_tecla@timeout:	
   842                           ; 2 bytes @ 0x6
   843                           
   844                           
   845                           ; 2 bytes @ 0x6
   846  0076                     	ds	1
   847  0077                     ??_e2pext_r:	
   848  0077                     ??_lcd_init:	
   849                           ; 1 bytes @ 0x7
   850                           
   851  0077                     ?_lcd_str:	
   852                           ; 1 bytes @ 0x7
   853                           
   854  0077                     lcd_str@str:	
   855                           ; 1 bytes @ 0x7
   856                           
   857                           
   858                           ; 2 bytes @ 0x7
   859  0077                     	ds	1
   860  0078                     ??_serial_rx:	
   861  0078                     ??_tc_tecla:	
   862                           ; 1 bytes @ 0x8
   863                           
   864  0078                     e2pext_r@ret:	
   865                           ; 1 bytes @ 0x8
   866                           
   867  0078                     serial_rx@to:	
   868                           ; 1 bytes @ 0x8
   869                           
   870                           
   871                           ; 2 bytes @ 0x8
   872  0078                     	ds	1
   873  0079                     ??_lcd_str:	
   874  0079                     e2pext_r@ah:	
   875                           ; 1 bytes @ 0x9
   876                           
   877                           
   878                           ; 1 bytes @ 0x9
   879  0079                     	ds	1
   880  007A                     e2pext_r@al:	
   881  007A                     lcd_str@i:	
   882                           ; 1 bytes @ 0xA
   883                           
   884                           
   885                           ; 1 bytes @ 0xA
   886  007A                     	ds	1
   887  007B                     ?_e2pext_w:	
   888  007B                     e2pext_w@addr:	
   889                           ; 1 bytes @ 0xB
   890                           
   891                           
   892                           ; 2 bytes @ 0xB
   893  007B                     	ds	2
   894  007D                     e2pext_w@val:	
   895                           
   896                           ; 1 bytes @ 0xD
   897  007D                     	ds	1
   898                           
   899                           	psect	cstackBANK0
   900  0034                     __pcstackBANK0:	
   901  0034                     ??_e2pext_w:	
   902  0034                     tc_tecla@to:	
   903                           ; 1 bytes @ 0x0
   904                           
   905                           
   906                           ; 2 bytes @ 0x0
   907  0034                     	ds	2
   908  0036                     e2pext_w@ah:	
   909  0036                     tc_tecla@tmp:	
   910                           ; 1 bytes @ 0x2
   911                           
   912                           
   913                           ; 1 bytes @ 0x2
   914  0036                     	ds	1
   915  0037                     e2pext_w@al:	
   916  0037                     tc_tecla@ret:	
   917                           ; 1 bytes @ 0x3
   918                           
   919                           
   920                           ; 1 bytes @ 0x3
   921  0037                     	ds	1
   922  0038                     e2pext_w@nt:	
   923  0038                     tc_tecla@i:	
   924                           ; 1 bytes @ 0x4
   925                           
   926                           
   927                           ; 1 bytes @ 0x4
   928  0038                     	ds	1
   929  0039                     e2pext_w@tmp:	
   930                           
   931                           ; 2 bytes @ 0x5
   932  0039                     	ds	2
   933  003B                     ??_main:	
   934                           
   935                           ; 1 bytes @ 0x7
   936  003B                     	ds	1
   937  003C                     main@tmp:	
   938                           
   939                           ; 1 bytes @ 0x8
   940  003C                     	ds	1
   941  003D                     main@i:	
   942                           
   943                           ; 1 bytes @ 0x9
   944  003D                     	ds	1
   945                           
   946                           	psect	maintext
   947  0589                     __pmaintext:	
   948 ;;
   949 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   950 ;;
   951 ;; *************** function _main *****************
   952 ;; Defined at:
   953 ;;		line 39 in file "teste_b2.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;		None
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  i               1    9[BANK0 ] unsigned char 
   958 ;;  tmp             1    8[BANK0 ] unsigned char 
   959 ;; Return value:  Size  Location     Type
   960 ;;                  1    wreg      void 
   961 ;; Registers used:
   962 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : B00/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   968 ;;      Params:         0       0       0       0
   969 ;;      Locals:         0       2       0       0
   970 ;;      Temps:          0       1       0       0
   971 ;;      Totals:         0       3       0       0
   972 ;;Total ram usage:        3 bytes
   973 ;; Hardware stack levels required when called:    4
   974 ;; This function calls:
   975 ;;		_atraso_ms
   976 ;;		_e2pext_r
   977 ;;		_e2pext_w
   978 ;;		_i2c_init
   979 ;;		_lcd_cmd
   980 ;;		_lcd_dat
   981 ;;		_lcd_init
   982 ;;		_lcd_str
   983 ;;		_rtc_r
   984 ;;		_serial_init
   985 ;;		_serial_rx
   986 ;;		_serial_tx
   987 ;;		_serial_tx_str
   988 ;;		_tc_tecla
   989 ;; This function is called by:
   990 ;;		Startup code after reset
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994                           
   995                           ;psect for function _main
   996  0589                     _main:	
   997                           
   998                           ;teste_b2.c: 40: unsigned char i,tmp;
   999                           ;teste_b2.c: 42: CMCON=0x07;
  1000                           
  1001                           ;incstack = 0
  1002                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1003  0589  3007               	movlw	7
  1004  058A  1283               	bcf	3,5	;RP0=0, select bank0
  1005  058B  1303               	bcf	3,6	;RP1=0, select bank0
  1006  058C  009F               	movwf	31	;volatile
  1007                           
  1008                           ;teste_b2.c: 43: TRISA=0x30;
  1009  058D  3030               	movlw	48
  1010  058E  1683               	bsf	3,5	;RP0=1, select bank1
  1011  058F  1303               	bcf	3,6	;RP1=0, select bank1
  1012  0590  0085               	movwf	5	;volatile
  1013                           
  1014                           ;teste_b2.c: 44: TRISB=0xE7;
  1015  0591  30E7               	movlw	231
  1016  0592  0086               	movwf	6	;volatile
  1017                           
  1018                           ;teste_b2.c: 46: PORTA=0xFE;
  1019  0593  30FE               	movlw	254
  1020  0594  1283               	bcf	3,5	;RP0=0, select bank0
  1021  0595  1303               	bcf	3,6	;RP1=0, select bank0
  1022  0596  0085               	movwf	5	;volatile
  1023                           
  1024                           ;teste_b2.c: 47: PORTB=0x00;
  1025  0597  0186               	clrf	6	;volatile
  1026                           
  1027                           ;teste_b2.c: 49: lcd_init();
  1028  0598  21FE               	fcall	_lcd_init
  1029                           
  1030                           ;teste_b2.c: 51: i2c_init();
  1031  0599  20F0               	fcall	_i2c_init
  1032                           
  1033                           ;teste_b2.c: 53: serial_init();
  1034  059A  212B               	fcall	_serial_init
  1035                           
  1036                           ;teste_b2.c: 56: lcd_cmd(0x01);
  1037  059B  3001               	movlw	1
  1038  059C  2164               	fcall	_lcd_cmd
  1039                           
  1040                           ;teste_b2.c: 57: lcd_cmd(0x80);
  1041  059D  3080               	movlw	128
  1042  059E  2164               	fcall	_lcd_cmd
  1043                           
  1044                           ;teste_b2.c: 58: for(i=0;i<16;i++)
  1045  059F  1283               	bcf	3,5	;RP0=0, select bank0
  1046  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  1047  05A1  01BD               	clrf	main@i
  1048  05A2  3010               	movlw	16
  1049  05A3  023D               	subwf	main@i,w
  1050  05A4  1803               	btfsc	3,0
  1051  05A5  2DB3               	goto	l1845
  1052  05A6                     l1839:	
  1053                           
  1054                           ;teste_b2.c: 59: {
  1055                           ;teste_b2.c: 60: lcd_dat('A'+i);
  1056  05A6  083D               	movf	main@i,w
  1057  05A7  3E41               	addlw	65
  1058  05A8  217E               	fcall	_lcd_dat
  1059  05A9  3001               	movlw	1
  1060  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  1061  05AB  1303               	bcf	3,6	;RP1=0, select bank0
  1062  05AC  00BB               	movwf	??_main
  1063  05AD  083B               	movf	??_main,w
  1064  05AE  07BD               	addwf	main@i,f
  1065  05AF  3010               	movlw	16
  1066  05B0  023D               	subwf	main@i,w
  1067  05B1  1C03               	skipc
  1068  05B2  2DA6               	goto	l1839
  1069  05B3                     l1845:	
  1070                           
  1071                           ;teste_b2.c: 61: }
  1072                           ;teste_b2.c: 62: lcd_cmd(0xC0);
  1073  05B3  30C0               	movlw	192
  1074  05B4  2164               	fcall	_lcd_cmd
  1075                           
  1076                           ;teste_b2.c: 63: for(i=0;i<16;i++)
  1077  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  1078  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  1079  05B7  01BD               	clrf	main@i
  1080  05B8  3010               	movlw	16
  1081  05B9  023D               	subwf	main@i,w
  1082  05BA  1803               	btfsc	3,0
  1083  05BB  2DC9               	goto	l1859
  1084  05BC                     l1853:	
  1085                           
  1086                           ;teste_b2.c: 64: {
  1087                           ;teste_b2.c: 65: lcd_dat('a'+i);
  1088  05BC  083D               	movf	main@i,w
  1089  05BD  3E61               	addlw	97
  1090  05BE  217E               	fcall	_lcd_dat
  1091  05BF  3001               	movlw	1
  1092  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  1093  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  1094  05C2  00BB               	movwf	??_main
  1095  05C3  083B               	movf	??_main,w
  1096  05C4  07BD               	addwf	main@i,f
  1097  05C5  3010               	movlw	16
  1098  05C6  023D               	subwf	main@i,w
  1099  05C7  1C03               	skipc
  1100  05C8  2DBC               	goto	l1853
  1101  05C9                     l1859:	
  1102                           
  1103                           ;teste_b2.c: 66: }
  1104                           ;teste_b2.c: 68: atraso_ms(200);
  1105  05C9  30C8               	movlw	200
  1106  05CA  00F0               	movwf	atraso_ms@valor
  1107  05CB  3000               	movlw	0
  1108  05CC  00F1               	movwf	atraso_ms@valor+1
  1109  05CD  21B6               	fcall	_atraso_ms
  1110                           
  1111                           ;teste_b2.c: 69: lcd_cmd(0x01);
  1112  05CE  3001               	movlw	1
  1113  05CF  2164               	fcall	_lcd_cmd
  1114                           
  1115                           ;teste_b2.c: 70: lcd_cmd(0x80+3);
  1116  05D0  3083               	movlw	131
  1117  05D1  2164               	fcall	_lcd_cmd
  1118                           
  1119                           ;teste_b2.c: 71: lcd_str("Teste LCD");
  1120  05D2  30F6               	movlw	low (STR_1| (0+32768))
  1121  05D3  00F7               	movwf	lcd_str@str
  1122  05D4  3084               	movlw	high (STR_1| (0+32768))
  1123  05D5  00F8               	movwf	lcd_str@str+1
  1124  05D6  2198               	fcall	_lcd_str
  1125                           
  1126                           ;teste_b2.c: 73: for(i=32;i<128;i++)
  1127  05D7  3020               	movlw	32
  1128  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  1129  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  1130  05DA  00BB               	movwf	??_main
  1131  05DB  083B               	movf	??_main,w
  1132  05DC  00BD               	movwf	main@i
  1133  05DD  3080               	movlw	128
  1134  05DE  023D               	subwf	main@i,w
  1135  05DF  1803               	btfsc	3,0
  1136  05E0  2DFA               	goto	l1877
  1137  05E1                     l1869:	
  1138                           
  1139                           ;teste_b2.c: 74: {
  1140                           ;teste_b2.c: 75: if((i%16) == 0)lcd_cmd(0xC0);
  1141  05E1  083D               	movf	main@i,w
  1142  05E2  390F               	andlw	15
  1143  05E3  1D03               	btfss	3,2
  1144  05E4  2DE7               	goto	l270
  1145  05E5  30C0               	movlw	192
  1146  05E6  2164               	fcall	_lcd_cmd
  1147  05E7                     l270:	
  1148                           
  1149                           ;teste_b2.c: 76: lcd_dat(i);
  1150  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  1151  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  1152  05E9  083D               	movf	main@i,w
  1153  05EA  217E               	fcall	_lcd_dat
  1154                           
  1155                           ;teste_b2.c: 77: atraso_ms(50);
  1156  05EB  3032               	movlw	50
  1157  05EC  00F0               	movwf	atraso_ms@valor
  1158  05ED  3000               	movlw	0
  1159  05EE  00F1               	movwf	atraso_ms@valor+1
  1160  05EF  21B6               	fcall	_atraso_ms
  1161  05F0  3001               	movlw	1
  1162  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  1163  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  1164  05F3  00BB               	movwf	??_main
  1165  05F4  083B               	movf	??_main,w
  1166  05F5  07BD               	addwf	main@i,f
  1167  05F6  3080               	movlw	128
  1168  05F7  023D               	subwf	main@i,w
  1169  05F8  1C03               	skipc
  1170  05F9  2DE1               	goto	l1869
  1171  05FA                     l1877:	
  1172                           
  1173                           ;teste_b2.c: 78: }
  1174                           ;teste_b2.c: 80: atraso_ms(100);
  1175  05FA  3064               	movlw	100
  1176  05FB  00F0               	movwf	atraso_ms@valor
  1177  05FC  3000               	movlw	0
  1178  05FD  00F1               	movwf	atraso_ms@valor+1
  1179  05FE  21B6               	fcall	_atraso_ms
  1180                           
  1181                           ;teste_b2.c: 81: lcd_cmd(0x01);
  1182  05FF  3001               	movlw	1
  1183  0600  2164               	fcall	_lcd_cmd
  1184                           
  1185                           ;teste_b2.c: 82: lcd_cmd(0x80+3);
  1186  0601  3083               	movlw	131
  1187  0602  2164               	fcall	_lcd_cmd
  1188                           
  1189                           ;teste_b2.c: 83: lcd_str("Teste LCD");
  1190  0603  30F6               	movlw	low (STR_1| (0+32768))
  1191  0604  00F7               	movwf	lcd_str@str
  1192  0605  3084               	movlw	high (STR_1| (0+32768))
  1193  0606  00F8               	movwf	lcd_str@str+1
  1194  0607  2198               	fcall	_lcd_str
  1195                           
  1196                           ;teste_b2.c: 84: lcd_cmd(0xC0+7);
  1197  0608  30C7               	movlw	199
  1198  0609  2164               	fcall	_lcd_cmd
  1199                           
  1200                           ;teste_b2.c: 85: lcd_str("Ok");
  1201  060A  301F               	movlw	low (STR_3| (0+32768))
  1202  060B  00F7               	movwf	lcd_str@str
  1203  060C  3085               	movlw	high (STR_3| (0+32768))
  1204  060D  00F8               	movwf	lcd_str@str+1
  1205  060E  2198               	fcall	_lcd_str
  1206                           
  1207                           ;teste_b2.c: 86: atraso_ms(500);
  1208  060F  30F4               	movlw	244
  1209  0610  00F0               	movwf	atraso_ms@valor
  1210  0611  3001               	movlw	1
  1211  0612  00F1               	movwf	atraso_ms@valor+1
  1212  0613  21B6               	fcall	_atraso_ms
  1213                           
  1214                           ;teste_b2.c: 89: lcd_cmd(0x01);
  1215  0614  3001               	movlw	1
  1216  0615  2164               	fcall	_lcd_cmd
  1217                           
  1218                           ;teste_b2.c: 90: lcd_cmd(0x80+1);
  1219  0616  3081               	movlw	129
  1220  0617  2164               	fcall	_lcd_cmd
  1221                           
  1222                           ;teste_b2.c: 91: lcd_str("Teste LEDs");
  1223  0618  30D7               	movlw	low (STR_4| (0+32768))
  1224  0619  00F7               	movwf	lcd_str@str
  1225  061A  3084               	movlw	high (STR_4| (0+32768))
  1226  061B  00F8               	movwf	lcd_str@str+1
  1227  061C  2198               	fcall	_lcd_str
  1228                           
  1229                           ;teste_b2.c: 93: for(i=0;i<4;i++)
  1230  061D  1283               	bcf	3,5	;RP0=0, select bank0
  1231  061E  1303               	bcf	3,6	;RP1=0, select bank0
  1232  061F  01BD               	clrf	main@i
  1233  0620  3004               	movlw	4
  1234  0621  023D               	subwf	main@i,w
  1235  0622  1803               	btfsc	3,0
  1236  0623  2E5B               	goto	l1917
  1237  0624                     l1897:	
  1238                           
  1239                           ;teste_b2.c: 94: {
  1240                           ;teste_b2.c: 95: atraso_ms(100);
  1241  0624  3064               	movlw	100
  1242  0625  00F0               	movwf	atraso_ms@valor
  1243  0626  3000               	movlw	0
  1244  0627  00F1               	movwf	atraso_ms@valor+1
  1245  0628  21B6               	fcall	_atraso_ms
  1246                           
  1247                           ;teste_b2.c: 96: RA1^=1;
  1248  0629  1283               	bcf	3,5	;RP0=0, select bank0
  1249  062A  1303               	bcf	3,6	;RP1=0, select bank0
  1250  062B  3002               	movlw	2
  1251  062C  0685               	xorwf	5,f
  1252                           
  1253                           ;teste_b2.c: 97: atraso_ms(100);
  1254  062D  3064               	movlw	100
  1255  062E  00F0               	movwf	atraso_ms@valor
  1256  062F  3000               	movlw	0
  1257  0630  00F1               	movwf	atraso_ms@valor+1
  1258  0631  21B6               	fcall	_atraso_ms
  1259                           
  1260                           ;teste_b2.c: 98: RA2^=1;
  1261  0632  1283               	bcf	3,5	;RP0=0, select bank0
  1262  0633  1303               	bcf	3,6	;RP1=0, select bank0
  1263  0634  3004               	movlw	4
  1264  0635  0685               	xorwf	5,f
  1265                           
  1266                           ;teste_b2.c: 99: atraso_ms(100);
  1267  0636  3064               	movlw	100
  1268  0637  00F0               	movwf	atraso_ms@valor
  1269  0638  3000               	movlw	0
  1270  0639  00F1               	movwf	atraso_ms@valor+1
  1271  063A  21B6               	fcall	_atraso_ms
  1272                           
  1273                           ;teste_b2.c: 100: PORTA^=0x40;
  1274  063B  3040               	movlw	64
  1275  063C  1283               	bcf	3,5	;RP0=0, select bank0
  1276  063D  1303               	bcf	3,6	;RP1=0, select bank0
  1277  063E  00BB               	movwf	??_main
  1278  063F  083B               	movf	??_main,w
  1279  0640  0685               	xorwf	5,f	;volatile
  1280                           
  1281                           ;teste_b2.c: 101: atraso_ms(100);
  1282  0641  3064               	movlw	100
  1283  0642  00F0               	movwf	atraso_ms@valor
  1284  0643  3000               	movlw	0
  1285  0644  00F1               	movwf	atraso_ms@valor+1
  1286  0645  21B6               	fcall	_atraso_ms
  1287                           
  1288                           ;teste_b2.c: 102: PORTA^=0x80;
  1289  0646  3080               	movlw	128
  1290  0647  1283               	bcf	3,5	;RP0=0, select bank0
  1291  0648  1303               	bcf	3,6	;RP1=0, select bank0
  1292  0649  00BB               	movwf	??_main
  1293  064A  083B               	movf	??_main,w
  1294  064B  0685               	xorwf	5,f	;volatile
  1295                           
  1296                           ;teste_b2.c: 103: atraso_ms(100);
  1297  064C  3064               	movlw	100
  1298  064D  00F0               	movwf	atraso_ms@valor
  1299  064E  3000               	movlw	0
  1300  064F  00F1               	movwf	atraso_ms@valor+1
  1301  0650  21B6               	fcall	_atraso_ms
  1302  0651  3001               	movlw	1
  1303  0652  1283               	bcf	3,5	;RP0=0, select bank0
  1304  0653  1303               	bcf	3,6	;RP1=0, select bank0
  1305  0654  00BB               	movwf	??_main
  1306  0655  083B               	movf	??_main,w
  1307  0656  07BD               	addwf	main@i,f
  1308  0657  3004               	movlw	4
  1309  0658  023D               	subwf	main@i,w
  1310  0659  1C03               	skipc
  1311  065A  2E24               	goto	l1897
  1312  065B                     l1917:	
  1313                           
  1314                           ;teste_b2.c: 104: }
  1315                           ;teste_b2.c: 108: lcd_cmd(0x01);
  1316  065B  3001               	movlw	1
  1317  065C  2164               	fcall	_lcd_cmd
  1318                           
  1319                           ;teste_b2.c: 109: lcd_cmd(0x80+2);
  1320  065D  3082               	movlw	130
  1321  065E  2164               	fcall	_lcd_cmd
  1322                           
  1323                           ;teste_b2.c: 110: lcd_str("Teste Teclado");
  1324  065F  30A4               	movlw	low (STR_5| (0+32768))
  1325  0660  00F7               	movwf	lcd_str@str
  1326  0661  3084               	movlw	high (STR_5| (0+32768))
  1327  0662  00F8               	movwf	lcd_str@str+1
  1328  0663  2198               	fcall	_lcd_str
  1329                           
  1330                           ;teste_b2.c: 112: lcd_cmd(0xC0+1);
  1331  0664  30C1               	movlw	193
  1332  0665  2164               	fcall	_lcd_cmd
  1333                           
  1334                           ;teste_b2.c: 114: i=0;
  1335  0666  1283               	bcf	3,5	;RP0=0, select bank0
  1336  0667  1303               	bcf	3,6	;RP1=0, select bank0
  1337  0668  01BD               	clrf	main@i
  1338  0669                     l1929:	
  1339                           ;teste_b2.c: 115: while(i<14)
  1340                           
  1341  0669  300E               	movlw	14
  1342  066A  023D               	subwf	main@i,w
  1343  066B  1803               	btfsc	3,0
  1344  066C  2E7B               	goto	l1931
  1345                           
  1346                           ;teste_b2.c: 116: {
  1347                           ;teste_b2.c: 117: lcd_dat(tc_tecla(3000)+0x30);
  1348  066D  30B8               	movlw	184
  1349  066E  00F6               	movwf	tc_tecla@timeout
  1350  066F  300B               	movlw	11
  1351  0670  00F7               	movwf	tc_tecla@timeout+1
  1352  0671  2363               	fcall	_tc_tecla
  1353  0672  3E30               	addlw	48
  1354  0673  217E               	fcall	_lcd_dat
  1355                           
  1356                           ;teste_b2.c: 118: i++;
  1357  0674  3001               	movlw	1
  1358  0675  1283               	bcf	3,5	;RP0=0, select bank0
  1359  0676  1303               	bcf	3,6	;RP1=0, select bank0
  1360  0677  00BB               	movwf	??_main
  1361  0678  083B               	movf	??_main,w
  1362  0679  07BD               	addwf	main@i,f
  1363  067A  2E69               	goto	l1929
  1364  067B                     l1931:	
  1365                           
  1366                           ;teste_b2.c: 119: }
  1367                           ;teste_b2.c: 122: lcd_cmd(0x01);
  1368  067B  3001               	movlw	1
  1369  067C  2164               	fcall	_lcd_cmd
  1370                           
  1371                           ;teste_b2.c: 123: lcd_cmd(0x80);
  1372  067D  3080               	movlw	128
  1373  067E  2164               	fcall	_lcd_cmd
  1374                           
  1375                           ;teste_b2.c: 124: lcd_str("Teste EEPROM EXT");
  1376  067F  3037               	movlw	low (STR_6| (0+32768))
  1377  0680  00F7               	movwf	lcd_str@str
  1378  0681  3084               	movlw	high (STR_6| (0+32768))
  1379  0682  00F8               	movwf	lcd_str@str+1
  1380  0683  2198               	fcall	_lcd_str
  1381                           
  1382                           ;teste_b2.c: 126: lcd_cmd(0xC0);
  1383  0684  30C0               	movlw	192
  1384  0685  2164               	fcall	_lcd_cmd
  1385                           
  1386                           ;teste_b2.c: 127: lcd_str("Testar (1/0) ?");
  1387  0686  3079               	movlw	low (STR_7| (0+32768))
  1388  0687  00F7               	movwf	lcd_str@str
  1389  0688  3084               	movlw	high (STR_7| (0+32768))
  1390  0689  00F8               	movwf	lcd_str@str+1
  1391  068A  2198               	fcall	_lcd_str
  1392                           
  1393                           ;teste_b2.c: 129: if(tc_tecla(0) == 1)
  1394  068B  3000               	movlw	0
  1395  068C  00F6               	movwf	tc_tecla@timeout
  1396  068D  00F7               	movwf	tc_tecla@timeout+1
  1397  068E  2363               	fcall	_tc_tecla
  1398  068F  3A01               	xorlw	1
  1399  0690  1D03               	skipz
  1400  0691  2EE6               	goto	l1951
  1401                           
  1402                           ;teste_b2.c: 130: {
  1403                           ;teste_b2.c: 131: tmp=e2pext_r(10);
  1404  0692  300A               	movlw	10
  1405  0693  00F5               	movwf	e2pext_r@addr
  1406  0694  3000               	movlw	0
  1407  0695  00F6               	movwf	e2pext_r@addr+1
  1408  0696  214A               	fcall	_e2pext_r
  1409  0697  1283               	bcf	3,5	;RP0=0, select bank0
  1410  0698  1303               	bcf	3,6	;RP1=0, select bank0
  1411  0699  00BB               	movwf	??_main
  1412  069A  083B               	movf	??_main,w
  1413  069B  00BC               	movwf	main@tmp
  1414                           
  1415                           ;teste_b2.c: 132: lcd_dat(tmp);
  1416  069C  083C               	movf	main@tmp,w
  1417  069D  217E               	fcall	_lcd_dat
  1418                           
  1419                           ;teste_b2.c: 134: e2pext_w(10,0xA5);
  1420  069E  300A               	movlw	10
  1421  069F  00FB               	movwf	e2pext_w@addr
  1422  06A0  3000               	movlw	0
  1423  06A1  00FC               	movwf	e2pext_w@addr+1
  1424  06A2  30A5               	movlw	165
  1425  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  1426  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  1427  06A5  00BB               	movwf	??_main
  1428  06A6  083B               	movf	??_main,w
  1429  06A7  00FD               	movwf	e2pext_w@val
  1430  06A8  2288               	fcall	_e2pext_w
  1431                           
  1432                           ;teste_b2.c: 135: e2pext_w(10,0x5A);
  1433  06A9  300A               	movlw	10
  1434  06AA  00FB               	movwf	e2pext_w@addr
  1435  06AB  3000               	movlw	0
  1436  06AC  00FC               	movwf	e2pext_w@addr+1
  1437  06AD  305A               	movlw	90
  1438  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1439  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1440  06B0  00BB               	movwf	??_main
  1441  06B1  083B               	movf	??_main,w
  1442  06B2  00FD               	movwf	e2pext_w@val
  1443  06B3  2288               	fcall	_e2pext_w
  1444                           
  1445                           ;teste_b2.c: 136: i=e2pext_r(10);
  1446  06B4  300A               	movlw	10
  1447  06B5  00F5               	movwf	e2pext_r@addr
  1448  06B6  3000               	movlw	0
  1449  06B7  00F6               	movwf	e2pext_r@addr+1
  1450  06B8  214A               	fcall	_e2pext_r
  1451  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  1452  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  1453  06BB  00BB               	movwf	??_main
  1454  06BC  083B               	movf	??_main,w
  1455  06BD  00BD               	movwf	main@i
  1456                           
  1457                           ;teste_b2.c: 138: e2pext_w(10,tmp);
  1458  06BE  300A               	movlw	10
  1459  06BF  00FB               	movwf	e2pext_w@addr
  1460  06C0  3000               	movlw	0
  1461  06C1  00FC               	movwf	e2pext_w@addr+1
  1462  06C2  083C               	movf	main@tmp,w
  1463  06C3  00BB               	movwf	??_main
  1464  06C4  083B               	movf	??_main,w
  1465  06C5  00FD               	movwf	e2pext_w@val
  1466  06C6  2288               	fcall	_e2pext_w
  1467                           
  1468                           ;teste_b2.c: 140: lcd_cmd(0x01);
  1469  06C7  3001               	movlw	1
  1470  06C8  2164               	fcall	_lcd_cmd
  1471                           
  1472                           ;teste_b2.c: 141: lcd_cmd(0x80);
  1473  06C9  3080               	movlw	128
  1474  06CA  2164               	fcall	_lcd_cmd
  1475                           
  1476                           ;teste_b2.c: 142: lcd_str("Teste EEPROM EXT");
  1477  06CB  3037               	movlw	low (STR_6| (0+32768))
  1478  06CC  00F7               	movwf	lcd_str@str
  1479  06CD  3084               	movlw	high (STR_6| (0+32768))
  1480  06CE  00F8               	movwf	lcd_str@str+1
  1481  06CF  2198               	fcall	_lcd_str
  1482                           
  1483                           ;teste_b2.c: 143: lcd_cmd(0xC0);
  1484  06D0  30C0               	movlw	192
  1485  06D1  2164               	fcall	_lcd_cmd
  1486                           
  1487                           ;teste_b2.c: 144: if(i == 0x5A)
  1488  06D2  305A               	movlw	90
  1489  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  1490  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  1491  06D5  063D               	xorwf	main@i,w
  1492  06D6  1D03               	btfss	3,2
  1493  06D7  2EDC               	goto	l1947
  1494                           
  1495                           ;teste_b2.c: 145: lcd_str("     OK");
  1496  06D8  3013               	movlw	low (STR_9| (0+32768))
  1497  06D9  00F7               	movwf	lcd_str@str
  1498  06DA  3085               	movlw	high (STR_9| (0+32768))
  1499  06DB  2EDF               	goto	L1
  1500  06DC                     l1947:	
  1501                           
  1502                           ;teste_b2.c: 146: else
  1503                           ;teste_b2.c: 147: lcd_str("     ERRO");
  1504  06DC  3000               	movlw	low (STR_10| (0+32768))
  1505  06DD  00F7               	movwf	lcd_str@str
  1506  06DE  3085               	movlw	high (STR_10| (0+32768))
  1507  06DF                     L1:	
  1508  06DF  00F8               	movwf	lcd_str@str+1
  1509  06E0  2198               	fcall	_lcd_str
  1510                           
  1511                           ;teste_b2.c: 149: atraso_ms(1000);
  1512  06E1  30E8               	movlw	232
  1513  06E2  00F0               	movwf	atraso_ms@valor
  1514  06E3  3003               	movlw	3
  1515  06E4  00F1               	movwf	atraso_ms@valor+1
  1516  06E5  21B6               	fcall	_atraso_ms
  1517  06E6                     l1951:	
  1518                           
  1519                           ;teste_b2.c: 150: }
  1520                           ;teste_b2.c: 154: lcd_cmd(0x01);
  1521  06E6  3001               	movlw	1
  1522  06E7  2164               	fcall	_lcd_cmd
  1523                           
  1524                           ;teste_b2.c: 155: lcd_cmd(0x80);
  1525  06E8  3080               	movlw	128
  1526  06E9  2164               	fcall	_lcd_cmd
  1527                           
  1528                           ;teste_b2.c: 156: lcd_str("Teste RTC");
  1529  06EA  30EC               	movlw	low (STR_11| (0+32768))
  1530  06EB  00F7               	movwf	lcd_str@str
  1531  06EC  3084               	movlw	high (STR_11| (0+32768))
  1532  06ED  00F8               	movwf	lcd_str@str+1
  1533  06EE  2198               	fcall	_lcd_str
  1534                           
  1535                           ;teste_b2.c: 162: rtc_r();
  1536  06EF  22C6               	fcall	_rtc_r
  1537                           
  1538                           ;teste_b2.c: 163: lcd_cmd(0xC0);
  1539  06F0  30C0               	movlw	192
  1540  06F1  2164               	fcall	_lcd_cmd
  1541                           
  1542                           ;teste_b2.c: 164: lcd_str((char *)date);
  1543  06F2  302A               	movlw	(low (_date| 0))& (0+255)
  1544  06F3  00F7               	movwf	lcd_str@str
  1545  06F4  3000               	movlw	0
  1546  06F5  00F8               	movwf	lcd_str@str+1
  1547  06F6  2198               	fcall	_lcd_str
  1548                           
  1549                           ;teste_b2.c: 165: atraso_ms(1500);
  1550  06F7  30DC               	movlw	220
  1551  06F8  00F0               	movwf	atraso_ms@valor
  1552  06F9  3005               	movlw	5
  1553  06FA  00F1               	movwf	atraso_ms@valor+1
  1554  06FB  21B6               	fcall	_atraso_ms
  1555                           
  1556                           ;teste_b2.c: 166: for(i=0;i<16;i++)
  1557  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  1558  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  1559  06FE  01BD               	clrf	main@i
  1560  06FF  3010               	movlw	16
  1561  0700  023D               	subwf	main@i,w
  1562  0701  1803               	btfsc	3,0
  1563  0702  2F1A               	goto	l1977
  1564  0703                     l1967:	
  1565                           
  1566                           ;teste_b2.c: 167: {
  1567                           ;teste_b2.c: 168: rtc_r();
  1568  0703  22C6               	fcall	_rtc_r
  1569                           
  1570                           ;teste_b2.c: 169: lcd_cmd(0xC0);;
  1571  0704  30C0               	movlw	192
  1572  0705  2164               	fcall	_lcd_cmd
  1573                           
  1574                           ;teste_b2.c: 170: lcd_str((char *)time);
  1575  0706  3020               	movlw	(low (_time| 0))& (0+255)
  1576  0707  00F7               	movwf	lcd_str@str
  1577  0708  3000               	movlw	0
  1578  0709  00F8               	movwf	lcd_str@str+1
  1579  070A  2198               	fcall	_lcd_str
  1580                           
  1581                           ;teste_b2.c: 171: atraso_ms(500);
  1582  070B  30F4               	movlw	244
  1583  070C  00F0               	movwf	atraso_ms@valor
  1584  070D  3001               	movlw	1
  1585  070E  00F1               	movwf	atraso_ms@valor+1
  1586  070F  21B6               	fcall	_atraso_ms
  1587  0710  3001               	movlw	1
  1588  0711  1283               	bcf	3,5	;RP0=0, select bank0
  1589  0712  1303               	bcf	3,6	;RP1=0, select bank0
  1590  0713  00BB               	movwf	??_main
  1591  0714  083B               	movf	??_main,w
  1592  0715  07BD               	addwf	main@i,f
  1593  0716  3010               	movlw	16
  1594  0717  023D               	subwf	main@i,w
  1595  0718  1C03               	skipc
  1596  0719  2F03               	goto	l1967
  1597  071A                     l1977:	
  1598                           
  1599                           ;teste_b2.c: 172: }
  1600                           ;teste_b2.c: 178: lcd_cmd(0x01);
  1601  071A  3001               	movlw	1
  1602  071B  2164               	fcall	_lcd_cmd
  1603                           
  1604                           ;teste_b2.c: 179: lcd_cmd(0x80);
  1605  071C  3080               	movlw	128
  1606  071D  2164               	fcall	_lcd_cmd
  1607                           
  1608                           ;teste_b2.c: 180: lcd_str("Teste Serial");
  1609  071E  30BF               	movlw	low (STR_12| (0+32768))
  1610  071F  00F7               	movwf	lcd_str@str
  1611  0720  3084               	movlw	high (STR_12| (0+32768))
  1612  0721  00F8               	movwf	lcd_str@str+1
  1613  0722  2198               	fcall	_lcd_str
  1614                           
  1615                           ;teste_b2.c: 182: lcd_cmd(0xC0);
  1616  0723  30C0               	movlw	192
  1617  0724  2164               	fcall	_lcd_cmd
  1618                           
  1619                           ;teste_b2.c: 183: lcd_str("Testar (1/0) ?");
  1620  0725  3079               	movlw	low (STR_7| (0+32768))
  1621  0726  00F7               	movwf	lcd_str@str
  1622  0727  3084               	movlw	high (STR_7| (0+32768))
  1623  0728  00F8               	movwf	lcd_str@str+1
  1624  0729  2198               	fcall	_lcd_str
  1625                           
  1626                           ;teste_b2.c: 184: if(tc_tecla(0) == 1)
  1627  072A  3000               	movlw	0
  1628  072B  00F6               	movwf	tc_tecla@timeout
  1629  072C  00F7               	movwf	tc_tecla@timeout+1
  1630  072D  2363               	fcall	_tc_tecla
  1631  072E  3A01               	xorlw	1
  1632  072F  1D03               	skipz
  1633  0730  2FE3               	goto	l281
  1634                           
  1635                           ;teste_b2.c: 185: {
  1636                           ;teste_b2.c: 186: lcd_cmd(0x01);
  1637  0731  3001               	movlw	1
  1638  0732  2164               	fcall	_lcd_cmd
  1639                           
  1640                           ;teste_b2.c: 187: lcd_cmd(0x80);
  1641  0733  3080               	movlw	128
  1642  0734  2164               	fcall	_lcd_cmd
  1643                           
  1644                           ;teste_b2.c: 188: lcd_str("Teste Serial TX");
  1645  0735  3069               	movlw	low (STR_14| (0+32768))
  1646  0736  00F7               	movwf	lcd_str@str
  1647  0737  3084               	movlw	high (STR_14| (0+32768))
  1648  0738  00F8               	movwf	lcd_str@str+1
  1649  0739  2198               	fcall	_lcd_str
  1650                           
  1651                           ;teste_b2.c: 189: lcd_cmd(0xC0+2);
  1652  073A  30C2               	movlw	194
  1653  073B  2164               	fcall	_lcd_cmd
  1654                           
  1655                           ;teste_b2.c: 190: lcd_str("9600 8N1");
  1656  073C  300A               	movlw	low (STR_15| (0+32768))
  1657  073D  00F7               	movwf	lcd_str@str
  1658  073E  3085               	movlw	high (STR_15| (0+32768))
  1659  073F  00F8               	movwf	lcd_str@str+1
  1660  0740  2198               	fcall	_lcd_str
  1661                           
  1662                           ;teste_b2.c: 192: serial_tx_str("\r\n Picsimlab\r\n Teste Serial TX\r\n");
  1663  0741  3016               	movlw	low (STR_16| (0+32768))
  1664  0742  00F1               	movwf	serial_tx_str@val
  1665  0743  3084               	movlw	high (STR_16| (0+32768))
  1666  0744  00F2               	movwf	serial_tx_str@val+1
  1667  0745  2568               	fcall	_serial_tx_str
  1668                           
  1669                           ;teste_b2.c: 194: for(i=0;i<4;i++)
  1670  0746  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0747  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0748  01BD               	clrf	main@i
  1673  0749  3004               	movlw	4
  1674  074A  023D               	subwf	main@i,w
  1675  074B  1803               	btfsc	3,0
  1676  074C  2F5F               	goto	l2003
  1677  074D                     l1995:	
  1678                           
  1679                           ;teste_b2.c: 195: {
  1680                           ;teste_b2.c: 196: serial_tx(i+0x30);
  1681  074D  083D               	movf	main@i,w
  1682  074E  3E30               	addlw	48
  1683  074F  2114               	fcall	_serial_tx
  1684                           
  1685                           ;teste_b2.c: 197: serial_tx_str(" PicsimLab\r\n");
  1686  0750  30B2               	movlw	low (STR_17| (0+32768))
  1687  0751  00F1               	movwf	serial_tx_str@val
  1688  0752  3084               	movlw	high (STR_17| (0+32768))
  1689  0753  00F2               	movwf	serial_tx_str@val+1
  1690  0754  2568               	fcall	_serial_tx_str
  1691  0755  3001               	movlw	1
  1692  0756  1283               	bcf	3,5	;RP0=0, select bank0
  1693  0757  1303               	bcf	3,6	;RP1=0, select bank0
  1694  0758  00BB               	movwf	??_main
  1695  0759  083B               	movf	??_main,w
  1696  075A  07BD               	addwf	main@i,f
  1697  075B  3004               	movlw	4
  1698  075C  023D               	subwf	main@i,w
  1699  075D  1C03               	skipc
  1700  075E  2F4D               	goto	l1995
  1701  075F                     l2003:	
  1702                           
  1703                           ;teste_b2.c: 198: }
  1704                           ;teste_b2.c: 199: atraso_ms(1000);
  1705  075F  30E8               	movlw	232
  1706  0760  00F0               	movwf	atraso_ms@valor
  1707  0761  3003               	movlw	3
  1708  0762  00F1               	movwf	atraso_ms@valor+1
  1709  0763  21B6               	fcall	_atraso_ms
  1710                           
  1711                           ;teste_b2.c: 201: lcd_cmd(0x01);
  1712  0764  3001               	movlw	1
  1713  0765  2164               	fcall	_lcd_cmd
  1714                           
  1715                           ;teste_b2.c: 202: lcd_cmd(0x80);
  1716  0766  3080               	movlw	128
  1717  0767  2164               	fcall	_lcd_cmd
  1718                           
  1719                           ;teste_b2.c: 203: lcd_str("Teste Serial RX");
  1720  0768  3059               	movlw	low (STR_18| (0+32768))
  1721  0769  00F7               	movwf	lcd_str@str
  1722  076A  3084               	movlw	high (STR_18| (0+32768))
  1723  076B  00F8               	movwf	lcd_str@str+1
  1724  076C  2198               	fcall	_lcd_str
  1725                           
  1726                           ;teste_b2.c: 204: serial_tx_str(" Digite!\r\n");
  1727  076D  30CC               	movlw	low (STR_19| (0+32768))
  1728  076E  00F1               	movwf	serial_tx_str@val
  1729  076F  3084               	movlw	high (STR_19| (0+32768))
  1730  0770  00F2               	movwf	serial_tx_str@val+1
  1731  0771  2568               	fcall	_serial_tx_str
  1732                           
  1733                           ;teste_b2.c: 205: for(i=0;i<32;i++)
  1734  0772  1283               	bcf	3,5	;RP0=0, select bank0
  1735  0773  1303               	bcf	3,6	;RP1=0, select bank0
  1736  0774  01BD               	clrf	main@i
  1737  0775  3020               	movlw	32
  1738  0776  023D               	subwf	main@i,w
  1739  0777  1803               	btfsc	3,0
  1740  0778  2F9E               	goto	l2031
  1741  0779                     l2015:	
  1742                           
  1743                           ;teste_b2.c: 206: {
  1744                           ;teste_b2.c: 207: if(!(i%16))
  1745  0779  083D               	movf	main@i,w
  1746  077A  390F               	andlw	15
  1747  077B  1D03               	btfss	3,2
  1748  077C  2F84               	goto	l2021
  1749                           
  1750                           ;teste_b2.c: 208: {
  1751                           ;teste_b2.c: 209: lcd_cmd(0xC0);
  1752  077D  30C0               	movlw	192
  1753  077E  2164               	fcall	_lcd_cmd
  1754                           
  1755                           ;teste_b2.c: 210: serial_tx_str("\r\n");
  1756  077F  30E9               	movlw	low ((STR_26+7)| (0+32768))
  1757  0780  00F1               	movwf	serial_tx_str@val
  1758  0781  3084               	movlw	high ((STR_26+7)| (0+32768))
  1759  0782  00F2               	movwf	serial_tx_str@val+1
  1760  0783  2568               	fcall	_serial_tx_str
  1761  0784                     l2021:	
  1762                           
  1763                           ;teste_b2.c: 211: }
  1764                           ;teste_b2.c: 212: tmp=serial_rx(3000);
  1765  0784  30B8               	movlw	184
  1766  0785  00F6               	movwf	serial_rx@timeout
  1767  0786  300B               	movlw	11
  1768  0787  00F7               	movwf	serial_rx@timeout+1
  1769  0788  2225               	fcall	_serial_rx
  1770  0789  1283               	bcf	3,5	;RP0=0, select bank0
  1771  078A  1303               	bcf	3,6	;RP1=0, select bank0
  1772  078B  00BB               	movwf	??_main
  1773  078C  083B               	movf	??_main,w
  1774  078D  00BC               	movwf	main@tmp
  1775                           
  1776                           ;teste_b2.c: 213: lcd_dat(tmp);
  1777  078E  083C               	movf	main@tmp,w
  1778  078F  217E               	fcall	_lcd_dat
  1779                           
  1780                           ;teste_b2.c: 214: serial_tx(tmp);
  1781  0790  1283               	bcf	3,5	;RP0=0, select bank0
  1782  0791  1303               	bcf	3,6	;RP1=0, select bank0
  1783  0792  083C               	movf	main@tmp,w
  1784  0793  2114               	fcall	_serial_tx
  1785  0794  3001               	movlw	1
  1786  0795  1283               	bcf	3,5	;RP0=0, select bank0
  1787  0796  1303               	bcf	3,6	;RP1=0, select bank0
  1788  0797  00BB               	movwf	??_main
  1789  0798  083B               	movf	??_main,w
  1790  0799  07BD               	addwf	main@i,f
  1791  079A  3020               	movlw	32
  1792  079B  023D               	subwf	main@i,w
  1793  079C  1C03               	skipc
  1794  079D  2F79               	goto	l2015
  1795  079E                     l2031:	
  1796                           
  1797                           ;teste_b2.c: 215: }
  1798                           ;teste_b2.c: 216: atraso_ms(100);
  1799  079E  3064               	movlw	100
  1800  079F  00F0               	movwf	atraso_ms@valor
  1801  07A0  3000               	movlw	0
  1802  07A1  00F1               	movwf	atraso_ms@valor+1
  1803  07A2  21B6               	fcall	_atraso_ms
  1804                           
  1805                           ;teste_b2.c: 219: lcd_cmd(0x01);
  1806  07A3  3001               	movlw	1
  1807  07A4  2164               	fcall	_lcd_cmd
  1808                           
  1809                           ;teste_b2.c: 220: lcd_cmd(0x80);
  1810  07A5  3080               	movlw	128
  1811  07A6  2164               	fcall	_lcd_cmd
  1812                           
  1813                           ;teste_b2.c: 221: lcd_str("Teste Teclado TX");
  1814  07A7  3048               	movlw	low (STR_21| (0+32768))
  1815  07A8  00F7               	movwf	lcd_str@str
  1816  07A9  3084               	movlw	high (STR_21| (0+32768))
  1817  07AA  00F8               	movwf	lcd_str@str+1
  1818  07AB  2198               	fcall	_lcd_str
  1819                           
  1820                           ;teste_b2.c: 222: serial_tx_str("\r\n Aguarde!\r\n");
  1821  07AC  3088               	movlw	low (STR_22| (0+32768))
  1822  07AD  00F1               	movwf	serial_tx_str@val
  1823  07AE  3084               	movlw	high (STR_22| (0+32768))
  1824  07AF  00F2               	movwf	serial_tx_str@val+1
  1825  07B0  2568               	fcall	_serial_tx_str
  1826                           
  1827                           ;teste_b2.c: 223: for(i=0;i<32;i++)
  1828  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  1829  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  1830  07B3  01BD               	clrf	main@i
  1831  07B4  3020               	movlw	32
  1832  07B5  023D               	subwf	main@i,w
  1833  07B6  1803               	btfsc	3,0
  1834  07B7  2FDE               	goto	l2055
  1835  07B8                     l2043:	
  1836                           
  1837                           ;teste_b2.c: 224: {
  1838                           ;teste_b2.c: 225: if(!(i%16))
  1839  07B8  083D               	movf	main@i,w
  1840  07B9  390F               	andlw	15
  1841  07BA  1D03               	btfss	3,2
  1842  07BB  2FC3               	goto	l2049
  1843                           
  1844                           ;teste_b2.c: 226: {
  1845                           ;teste_b2.c: 227: lcd_cmd(0xC0);
  1846  07BC  30C0               	movlw	192
  1847  07BD  2164               	fcall	_lcd_cmd
  1848                           
  1849                           ;teste_b2.c: 228: serial_tx_str("\r\n");
  1850  07BE  30E9               	movlw	low ((STR_26+7)| (0+32768))
  1851  07BF  00F1               	movwf	serial_tx_str@val
  1852  07C0  3084               	movlw	high ((STR_26+7)| (0+32768))
  1853  07C1  00F2               	movwf	serial_tx_str@val+1
  1854  07C2  2568               	fcall	_serial_tx_str
  1855  07C3                     l2049:	
  1856                           
  1857                           ;teste_b2.c: 229: }
  1858                           ;teste_b2.c: 230: tmp=tc_tecla(2000)+0x30;
  1859  07C3  30D0               	movlw	208
  1860  07C4  00F6               	movwf	tc_tecla@timeout
  1861  07C5  3007               	movlw	7
  1862  07C6  00F7               	movwf	tc_tecla@timeout+1
  1863  07C7  2363               	fcall	_tc_tecla
  1864  07C8  3E30               	addlw	48
  1865  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  1866  07CA  1303               	bcf	3,6	;RP1=0, select bank0
  1867  07CB  00BB               	movwf	??_main
  1868  07CC  083B               	movf	??_main,w
  1869  07CD  00BC               	movwf	main@tmp
  1870                           
  1871                           ;teste_b2.c: 231: lcd_dat(tmp);
  1872  07CE  083C               	movf	main@tmp,w
  1873  07CF  217E               	fcall	_lcd_dat
  1874                           
  1875                           ;teste_b2.c: 232: serial_tx(tmp);
  1876  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  1877  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  1878  07D2  083C               	movf	main@tmp,w
  1879  07D3  2114               	fcall	_serial_tx
  1880  07D4  3001               	movlw	1
  1881  07D5  1283               	bcf	3,5	;RP0=0, select bank0
  1882  07D6  1303               	bcf	3,6	;RP1=0, select bank0
  1883  07D7  00BB               	movwf	??_main
  1884  07D8  083B               	movf	??_main,w
  1885  07D9  07BD               	addwf	main@i,f
  1886  07DA  3020               	movlw	32
  1887  07DB  023D               	subwf	main@i,w
  1888  07DC  1C03               	skipc
  1889  07DD  2FB8               	goto	l2043
  1890  07DE                     l2055:	
  1891                           
  1892                           ;teste_b2.c: 233: }
  1893                           ;teste_b2.c: 234: atraso_ms(100);
  1894  07DE  3064               	movlw	100
  1895  07DF  00F0               	movwf	atraso_ms@valor
  1896  07E0  3000               	movlw	0
  1897  07E1  00F1               	movwf	atraso_ms@valor+1
  1898  07E2  21B6               	fcall	_atraso_ms
  1899  07E3                     l281:	
  1900                           
  1901                           ;teste_b2.c: 235: }
  1902                           ;teste_b2.c: 238: lcd_cmd(0x01);
  1903  07E3  3001               	movlw	1
  1904  07E4  2164               	fcall	_lcd_cmd
  1905                           
  1906                           ;teste_b2.c: 239: lcd_cmd(0x80+4);
  1907  07E5  3084               	movlw	132
  1908  07E6  2164               	fcall	_lcd_cmd
  1909                           
  1910                           ;teste_b2.c: 240: lcd_str("Fim");
  1911  07E7  301B               	movlw	low (STR_24| (0+32768))
  1912  07E8  00F7               	movwf	lcd_str@str
  1913  07E9  3085               	movlw	high (STR_24| (0+32768))
  1914  07EA  00F8               	movwf	lcd_str@str+1
  1915  07EB  2198               	fcall	_lcd_str
  1916                           
  1917                           ;teste_b2.c: 241: lcd_cmd(0xC0+1);
  1918  07EC  30C1               	movlw	193
  1919  07ED  2164               	fcall	_lcd_cmd
  1920                           
  1921                           ;teste_b2.c: 242: lcd_str("Pressione RST");
  1922  07EE  3096               	movlw	low (STR_25| (0+32768))
  1923  07EF  00F7               	movwf	lcd_str@str
  1924  07F0  3084               	movlw	high (STR_25| (0+32768))
  1925  07F1  00F8               	movwf	lcd_str@str+1
  1926  07F2  2198               	fcall	_lcd_str
  1927                           
  1928                           ;teste_b2.c: 244: serial_tx_str("\r\n FIM!\r\n");
  1929  07F3  30E2               	movlw	low (STR_26| (0+32768))
  1930  07F4  00F1               	movwf	serial_tx_str@val
  1931  07F5  3084               	movlw	high (STR_26| (0+32768))
  1932  07F6  00F2               	movwf	serial_tx_str@val+1
  1933  07F7  2568               	fcall	_serial_tx_str
  1934  07F8                     l290:	
  1935                           ;teste_b2.c: 246: while(1);
  1936                           
  1937  07F8  2FF8               	goto	l290
  1938  07F9                     __end_of_main:	
  1939                           
  1940                           	psect	text1
  1941  0363                     __ptext1:	
  1942 ;; *************** function _tc_tecla *****************
  1943 ;; Defined at:
  1944 ;;		line 32 in file "teclado.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  timeout         2    6[COMMON] unsigned int 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  to              2    0[BANK0 ] unsigned int 
  1949 ;;  i               1    4[BANK0 ] unsigned char 
  1950 ;;  ret             1    3[BANK0 ] unsigned char 
  1951 ;;  tmp             1    2[BANK0 ] unsigned char 
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      unsigned char 
  1954 ;; Registers used:
  1955 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1961 ;;      Params:         2       0       0       0
  1962 ;;      Locals:         0       5       0       0
  1963 ;;      Temps:          2       0       0       0
  1964 ;;      Totals:         4       5       0       0
  1965 ;;Total ram usage:        9 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    1
  1968 ;; This function calls:
  1969 ;;		___bmul
  1970 ;;		_atraso_ms
  1971 ;; This function is called by:
  1972 ;;		_main
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           
  1977                           ;psect for function _tc_tecla
  1978  0363                     _tc_tecla:	
  1979                           
  1980                           ;teclado.c: 34: unsigned int to=0;
  1981                           
  1982                           ;incstack = 0
  1983                           ; Regs used in _tc_tecla: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1984  0363  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0364  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0365  01B4               	clrf	tc_tecla@to
  1987  0366  01B5               	clrf	tc_tecla@to+1
  1988                           
  1989                           ;teclado.c: 35: unsigned char i;
  1990                           ;teclado.c: 36: unsigned char ret=0;
  1991  0367  01B7               	clrf	tc_tecla@ret
  1992                           
  1993                           ;teclado.c: 37: unsigned char tmp=PORTA;
  1994  0368  0805               	movf	5,w	;volatile
  1995  0369  00F8               	movwf	??_tc_tecla
  1996  036A  0878               	movf	??_tc_tecla,w
  1997  036B  00B6               	movwf	tc_tecla@tmp
  1998                           
  1999                           ;teclado.c: 39: while(((to < timeout)||(!timeout))&&(!ret))
  2000  036C  2BE2               	goto	l1765
  2001  036D                     l1721:	
  2002                           
  2003                           ;teclado.c: 40: {
  2004                           ;teclado.c: 41: for(i=0;i<4;i++)
  2005  036D  01B8               	clrf	tc_tecla@i
  2006  036E  3004               	movlw	4
  2007  036F  0238               	subwf	tc_tecla@i,w
  2008  0370  1803               	btfsc	3,0
  2009  0371  2BD5               	goto	l1761
  2010  0372                     l1727:	
  2011                           
  2012                           ;teclado.c: 42: {
  2013                           ;teclado.c: 43: PORTA|=linha[i];
  2014  0372  0838               	movf	tc_tecla@i,w
  2015  0373  3E12               	addlw	low (_linha| (0+32768))
  2016  0374  0084               	movwf	4
  2017  0375  3084               	movlw	high (_linha| (0+32768))
  2018  0376  1803               	skipnc
  2019  0377  3E01               	addlw	1
  2020  0378  00FF               	movwf	127
  2021  0379  2400               	fcall	stringtab
  2022  037A  00F8               	movwf	??_tc_tecla
  2023  037B  0878               	movf	??_tc_tecla,w
  2024  037C  0485               	iorwf	5,f	;volatile
  2025                           
  2026                           ;teclado.c: 44: if(RB7){atraso_ms(20);if(RB7){while(RB7);ret= 1+(i*3);break;}};
  2027  037D  1F86               	btfss	6,7	;volatile
  2028  037E  2B92               	goto	l191
  2029  037F  3014               	movlw	20
  2030  0380  00F0               	movwf	atraso_ms@valor
  2031  0381  3000               	movlw	0
  2032  0382  00F1               	movwf	atraso_ms@valor+1
  2033  0383  21B6               	fcall	_atraso_ms
  2034  0384  1283               	bcf	3,5	;RP0=0, select bank0
  2035  0385  1303               	bcf	3,6	;RP1=0, select bank0
  2036  0386  1F86               	btfss	6,7	;volatile
  2037  0387  2B92               	goto	l191
  2038  0388                     l193:	
  2039  0388  1B86               	btfsc	6,7	;volatile
  2040  0389  2B88               	goto	l193
  2041  038A  3003               	movlw	3
  2042  038B  00F8               	movwf	??_tc_tecla
  2043  038C  0878               	movf	??_tc_tecla,w
  2044  038D  00F0               	movwf	___bmul@multiplicand
  2045  038E  0838               	movf	tc_tecla@i,w
  2046  038F  2139               	fcall	___bmul
  2047  0390  3E01               	addlw	1
  2048  0391  2BBB               	goto	L3
  2049  0392                     l191:	
  2050                           
  2051                           ;teclado.c: 45: if(RB6){atraso_ms(20);if(RB6){while(RB6);ret= 2+(i*3);break;}};
  2052  0392  1F06               	btfss	6,6	;volatile
  2053  0393  2BA7               	goto	l196
  2054  0394  3014               	movlw	20
  2055  0395  00F0               	movwf	atraso_ms@valor
  2056  0396  3000               	movlw	0
  2057  0397  00F1               	movwf	atraso_ms@valor+1
  2058  0398  21B6               	fcall	_atraso_ms
  2059  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2060  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2061  039B  1F06               	btfss	6,6	;volatile
  2062  039C  2BA7               	goto	l196
  2063  039D                     l198:	
  2064  039D  1B06               	btfsc	6,6	;volatile
  2065  039E  2B9D               	goto	l198
  2066  039F  3003               	movlw	3
  2067  03A0  00F8               	movwf	??_tc_tecla
  2068  03A1  0878               	movf	??_tc_tecla,w
  2069  03A2  00F0               	movwf	___bmul@multiplicand
  2070  03A3  0838               	movf	tc_tecla@i,w
  2071  03A4  2139               	fcall	___bmul
  2072  03A5  3E02               	addlw	2
  2073  03A6  2BBB               	goto	L3
  2074  03A7                     l196:	
  2075                           
  2076                           ;teclado.c: 46: if(RB5){atraso_ms(20);if(RB5){while(RB5);ret= 3+(i*3);break;}};
  2077  03A7  1E86               	btfss	6,5	;volatile
  2078  03A8  2BC1               	goto	l1755
  2079  03A9  3014               	movlw	20
  2080  03AA  00F0               	movwf	atraso_ms@valor
  2081  03AB  3000               	movlw	0
  2082  03AC  00F1               	movwf	atraso_ms@valor+1
  2083  03AD  21B6               	fcall	_atraso_ms
  2084  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  2085  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  2086  03B0  1E86               	btfss	6,5	;volatile
  2087  03B1  2BC1               	goto	l1755
  2088  03B2                     l203:	
  2089  03B2  1A86               	btfsc	6,5	;volatile
  2090  03B3  2BB2               	goto	l203
  2091  03B4  3003               	movlw	3
  2092  03B5  00F8               	movwf	??_tc_tecla
  2093  03B6  0878               	movf	??_tc_tecla,w
  2094  03B7  00F0               	movwf	___bmul@multiplicand
  2095  03B8  0838               	movf	tc_tecla@i,w
  2096  03B9  2139               	fcall	___bmul
  2097  03BA  3E03               	addlw	3
  2098  03BB                     L3:	
  2099  03BB  00F9               	movwf	??_tc_tecla+1
  2100  03BC  0879               	movf	??_tc_tecla+1,w
  2101  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  2102  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  2103  03BF  00B7               	movwf	tc_tecla@ret
  2104  03C0  2BD5               	goto	l1761
  2105  03C1                     l1755:	
  2106                           
  2107                           ;teclado.c: 47: PORTA&=~linha[i];
  2108  03C1  0838               	movf	tc_tecla@i,w
  2109  03C2  3E12               	addlw	low (_linha| (0+32768))
  2110  03C3  0084               	movwf	4
  2111  03C4  3084               	movlw	high (_linha| (0+32768))
  2112  03C5  1803               	skipnc
  2113  03C6  3E01               	addlw	1
  2114  03C7  00FF               	movwf	127
  2115  03C8  2400               	fcall	stringtab
  2116  03C9  3AFF               	xorlw	255
  2117  03CA  00F8               	movwf	??_tc_tecla
  2118  03CB  0878               	movf	??_tc_tecla,w
  2119  03CC  0585               	andwf	5,f	;volatile
  2120  03CD  3001               	movlw	1
  2121  03CE  00F8               	movwf	??_tc_tecla
  2122  03CF  0878               	movf	??_tc_tecla,w
  2123  03D0  07B8               	addwf	tc_tecla@i,f
  2124  03D1  3004               	movlw	4
  2125  03D2  0238               	subwf	tc_tecla@i,w
  2126  03D3  1C03               	skipc
  2127  03D4  2B72               	goto	l1727
  2128  03D5                     l1761:	
  2129                           
  2130                           ;teclado.c: 48: };
  2131                           ;teclado.c: 49: atraso_ms(5);
  2132  03D5  3005               	movlw	5
  2133  03D6  00F0               	movwf	atraso_ms@valor
  2134  03D7  3000               	movlw	0
  2135  03D8  00F1               	movwf	atraso_ms@valor+1
  2136  03D9  21B6               	fcall	_atraso_ms
  2137                           
  2138                           ;teclado.c: 50: to+=5;
  2139  03DA  3005               	movlw	5
  2140  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2141  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2142  03DD  07B4               	addwf	tc_tecla@to,f
  2143  03DE  1803               	skipnc
  2144  03DF  0AB5               	incf	tc_tecla@to+1,f
  2145  03E0  3000               	movlw	0
  2146  03E1  07B5               	addwf	tc_tecla@to+1,f
  2147  03E2                     l1765:	
  2148  03E2  0877               	movf	tc_tecla@timeout+1,w
  2149  03E3  0235               	subwf	tc_tecla@to+1,w
  2150  03E4  1D03               	skipz
  2151  03E5  2BE8               	goto	u1135
  2152  03E6  0876               	movf	tc_tecla@timeout,w
  2153  03E7  0234               	subwf	tc_tecla@to,w
  2154  03E8                     u1135:	
  2155  03E8  1C03               	skipc
  2156  03E9  2BEE               	goto	l1769
  2157  03EA  0876               	movf	tc_tecla@timeout,w
  2158  03EB  0477               	iorwf	tc_tecla@timeout+1,w
  2159  03EC  1D03               	btfss	3,2
  2160  03ED  2BF1               	goto	l1771
  2161  03EE                     l1769:	
  2162  03EE  0837               	movf	tc_tecla@ret,w
  2163  03EF  1903               	btfsc	3,2
  2164  03F0  2B6D               	goto	l1721
  2165  03F1                     l1771:	
  2166                           
  2167                           ;teclado.c: 51: }
  2168                           ;teclado.c: 53: if(!ret)ret=255;
  2169  03F1  0837               	movf	tc_tecla@ret,w
  2170  03F2  1D03               	btfss	3,2
  2171  03F3  2BF8               	goto	l1775
  2172  03F4  30FF               	movlw	255
  2173  03F5  00F8               	movwf	??_tc_tecla
  2174  03F6  0878               	movf	??_tc_tecla,w
  2175  03F7  00B7               	movwf	tc_tecla@ret
  2176  03F8                     l1775:	
  2177                           
  2178                           ;teclado.c: 54: if(ret == 11)ret=0;
  2179  03F8  300B               	movlw	11
  2180  03F9  0637               	xorwf	tc_tecla@ret,w
  2181  03FA  1903               	btfsc	3,2
  2182  03FB  01B7               	clrf	tc_tecla@ret
  2183                           
  2184                           ;teclado.c: 55: PORTA=tmp;
  2185  03FC  0836               	movf	tc_tecla@tmp,w
  2186  03FD  0085               	movwf	5	;volatile
  2187                           
  2188                           ;teclado.c: 56: return ret;
  2189  03FE  0837               	movf	tc_tecla@ret,w
  2190  03FF  0008               	return
  2191  0400                     __end_of_tc_tecla:	
  2192                           
  2193                           	psect	text2
  2194  0139                     __ptext2:	
  2195 ;; *************** function ___bmul *****************
  2196 ;; Defined at:
  2197 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul8.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;  multiplier      1    wreg     unsigned char 
  2200 ;;  multiplicand    1    0[COMMON] unsigned char 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  multiplier      1    3[COMMON] unsigned char 
  2203 ;;  product         1    2[COMMON] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  1    wreg      unsigned char 
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2213 ;;      Params:         1       0       0       0
  2214 ;;      Locals:         2       0       0       0
  2215 ;;      Temps:          1       0       0       0
  2216 ;;      Totals:         4       0       0       0
  2217 ;;Total ram usage:        4 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_tc_tecla
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           
  2227                           ;psect for function ___bmul
  2228  0139                     ___bmul:	
  2229                           
  2230                           ;incstack = 0
  2231                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2232                           ;___bmul@multiplier stored from wreg
  2233  0139  00F3               	movwf	___bmul@multiplier
  2234  013A  01F2               	clrf	___bmul@product
  2235  013B                     l1569:	
  2236  013B  1C73               	btfss	___bmul@multiplier,0
  2237  013C  2941               	goto	l1573
  2238  013D  0870               	movf	___bmul@multiplicand,w
  2239  013E  00F1               	movwf	??___bmul
  2240  013F  0871               	movf	??___bmul,w
  2241  0140  07F2               	addwf	___bmul@product,f
  2242  0141                     l1573:	
  2243  0141  1003               	clrc
  2244  0142  0DF0               	rlf	___bmul@multiplicand,f
  2245  0143  1003               	clrc
  2246  0144  0CF3               	rrf	___bmul@multiplier,f
  2247  0145  0873               	movf	___bmul@multiplier,w
  2248  0146  1D03               	btfss	3,2
  2249  0147  293B               	goto	l1569
  2250  0148  0872               	movf	___bmul@product,w
  2251  0149  0008               	return
  2252  014A                     __end_of___bmul:	
  2253                           
  2254                           	psect	text3
  2255  0568                     __ptext3:	
  2256 ;; *************** function _serial_tx_str *****************
  2257 ;; Defined at:
  2258 ;;		line 54 in file "serial.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  val             2    1[COMMON] PTR const unsigned char 
  2261 ;;		 -> STR_26(10), STR_23(3), STR_22(14), STR_20(3), 
  2262 ;;		 -> STR_19(11), STR_17(13), STR_16(33), 
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  i               1    4[COMMON] unsigned char 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2274 ;;      Params:         2       0       0       0
  2275 ;;      Locals:         1       0       0       0
  2276 ;;      Temps:          1       0       0       0
  2277 ;;      Totals:         4       0       0       0
  2278 ;;Total ram usage:        4 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:    1
  2281 ;; This function calls:
  2282 ;;		_serial_tx
  2283 ;; This function is called by:
  2284 ;;		_main
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           
  2289                           ;psect for function _serial_tx_str
  2290  0568                     _serial_tx_str:	
  2291                           
  2292                           ;serial.c: 56: unsigned char i=0;
  2293                           
  2294                           ;incstack = 0
  2295                           ; Regs used in _serial_tx_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2296  0568  01F4               	clrf	serial_tx_str@i
  2297  0569                     l1691:	
  2298                           ;serial.c: 58: while(val[i])
  2299                           
  2300  0569  0874               	movf	serial_tx_str@i,w
  2301  056A  0771               	addwf	serial_tx_str@val,w
  2302  056B  0084               	movwf	4
  2303  056C  0872               	movf	serial_tx_str@val+1,w
  2304  056D  1803               	skipnc
  2305  056E  0A72               	incf	serial_tx_str@val+1,w
  2306  056F  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0570  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0571  00FF               	movwf	127
  2309  0572  2400               	fcall	stringtab
  2310  0573  3A00               	xorlw	0
  2311  0574  1903               	btfsc	3,2
  2312  0575  0008               	return
  2313                           
  2314                           ;serial.c: 59: {
  2315                           ;serial.c: 60: serial_tx(val[i]);
  2316  0576  0874               	movf	serial_tx_str@i,w
  2317  0577  0771               	addwf	serial_tx_str@val,w
  2318  0578  0084               	movwf	4
  2319  0579  0872               	movf	serial_tx_str@val+1,w
  2320  057A  1803               	skipnc
  2321  057B  0A72               	incf	serial_tx_str@val+1,w
  2322  057C  1283               	bcf	3,5	;RP0=0, select bank0
  2323  057D  1303               	bcf	3,6	;RP1=0, select bank0
  2324  057E  00FF               	movwf	127
  2325  057F  2400               	fcall	stringtab
  2326  0580  2114               	fcall	_serial_tx
  2327                           
  2328                           ;serial.c: 61: i++;
  2329  0581  3001               	movlw	1
  2330  0582  00F3               	movwf	??_serial_tx_str
  2331  0583  0873               	movf	??_serial_tx_str,w
  2332  0584  07F4               	addwf	serial_tx_str@i,f
  2333  0585  2D69               	goto	l1691
  2334  0586                     __end_of_serial_tx_str:	
  2335                           
  2336                           	psect	text4
  2337  0114                     __ptext4:	
  2338 ;; *************** function _serial_tx *****************
  2339 ;; Defined at:
  2340 ;;		line 48 in file "serial.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;  val             1    wreg     unsigned char 
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  val             1    0[COMMON] unsigned char 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2354 ;;      Params:         0       0       0       0
  2355 ;;      Locals:         1       0       0       0
  2356 ;;      Temps:          0       0       0       0
  2357 ;;      Totals:         1       0       0       0
  2358 ;;Total ram usage:        1 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; This function calls:
  2361 ;;		Nothing
  2362 ;; This function is called by:
  2363 ;;		_serial_tx_str
  2364 ;;		_main
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           
  2369                           ;psect for function _serial_tx
  2370  0114                     _serial_tx:	
  2371                           
  2372                           ;incstack = 0
  2373                           ; Regs used in _serial_tx: [wreg]
  2374                           ;serial_tx@val stored from wreg
  2375  0114  00F0               	movwf	serial_tx@val
  2376                           
  2377                           ;serial.c: 50: TXREG=val;
  2378  0115  0870               	movf	serial_tx@val,w
  2379  0116  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0117  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0118  0099               	movwf	25	;volatile
  2382  0119                     l148:	
  2383                           ;serial.c: 51: while(!TRMT);
  2384                           
  2385  0119  1683               	bsf	3,5	;RP0=1, select bank1
  2386  011A  1303               	bcf	3,6	;RP1=0, select bank1
  2387  011B  1898               	btfsc	24,1	;volatile
  2388  011C  0008               	return
  2389  011D  2919               	goto	l148
  2390  011E                     __end_of_serial_tx:	
  2391                           
  2392                           	psect	text5
  2393  0225                     __ptext5:	
  2394 ;; *************** function _serial_rx *****************
  2395 ;; Defined at:
  2396 ;;		line 66 in file "serial.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  timeout         2    6[COMMON] unsigned int 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  to              2    8[COMMON] unsigned int 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      unsigned char 
  2403 ;; Registers used:
  2404 ;;		wreg, status,2, status,0, pclath, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2410 ;;      Params:         2       0       0       0
  2411 ;;      Locals:         2       0       0       0
  2412 ;;      Temps:          0       0       0       0
  2413 ;;      Totals:         4       0       0       0
  2414 ;;Total ram usage:        4 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    1
  2417 ;; This function calls:
  2418 ;;		_atraso_ms
  2419 ;; This function is called by:
  2420 ;;		_main
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           
  2425                           ;psect for function _serial_rx
  2426  0225                     _serial_rx:	
  2427                           
  2428                           ;serial.c: 68: unsigned int to=0;
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in _serial_rx: [wreg+status,2+status,0+pclath+cstack]
  2432  0225  01F8               	clrf	serial_rx@to
  2433  0226  01F9               	clrf	serial_rx@to+1
  2434                           
  2435                           ;serial.c: 70: if(RCSTAbits.FERR || RCSTAbits.OERR)
  2436  0227  1283               	bcf	3,5	;RP0=0, select bank0
  2437  0228  1303               	bcf	3,6	;RP1=0, select bank0
  2438  0229  1918               	btfsc	24,2	;volatile
  2439  022A  2A2D               	goto	l162
  2440  022B  1C98               	btfss	24,1	;volatile
  2441  022C  2A3B               	goto	l1703
  2442  022D                     l162:	
  2443                           
  2444                           ;serial.c: 71: {
  2445                           ;serial.c: 72: RCSTAbits.CREN=0;
  2446  022D  1218               	bcf	24,4	;volatile
  2447                           
  2448                           ;serial.c: 73: RCSTAbits.CREN=1;
  2449  022E  1618               	bsf	24,4	;volatile
  2450                           
  2451                           ;serial.c: 74: }
  2452                           ;serial.c: 76: while(((to < timeout)||(!timeout))&&(!PIR1bits.RCIF))
  2453  022F  2A3B               	goto	l1703
  2454  0230                     l1699:	
  2455                           
  2456                           ;serial.c: 77: {
  2457                           ;serial.c: 78: atraso_ms(20);
  2458  0230  3014               	movlw	20
  2459  0231  00F0               	movwf	atraso_ms@valor
  2460  0232  3000               	movlw	0
  2461  0233  00F1               	movwf	atraso_ms@valor+1
  2462  0234  21B6               	fcall	_atraso_ms
  2463                           
  2464                           ;serial.c: 79: to+=20;
  2465  0235  3014               	movlw	20
  2466  0236  07F8               	addwf	serial_rx@to,f
  2467  0237  1803               	skipnc
  2468  0238  0AF9               	incf	serial_rx@to+1,f
  2469  0239  3000               	movlw	0
  2470  023A  07F9               	addwf	serial_rx@to+1,f
  2471  023B                     l1703:	
  2472  023B  0877               	movf	serial_rx@timeout+1,w
  2473  023C  0279               	subwf	serial_rx@to+1,w
  2474  023D  1D03               	skipz
  2475  023E  2A41               	goto	u985
  2476  023F  0876               	movf	serial_rx@timeout,w
  2477  0240  0278               	subwf	serial_rx@to,w
  2478  0241                     u985:	
  2479  0241  1C03               	skipc
  2480  0242  2A47               	goto	l168
  2481  0243  0876               	movf	serial_rx@timeout,w
  2482  0244  0477               	iorwf	serial_rx@timeout+1,w
  2483  0245  1D03               	btfss	3,2
  2484  0246  2A4B               	goto	l169
  2485  0247                     l168:	
  2486  0247  1283               	bcf	3,5	;RP0=0, select bank0
  2487  0248  1303               	bcf	3,6	;RP1=0, select bank0
  2488  0249  1E8C               	btfss	12,5	;volatile
  2489  024A  2A30               	goto	l1699
  2490  024B                     l169:	
  2491                           
  2492                           ;serial.c: 80: }
  2493                           ;serial.c: 81: if(PIR1bits.RCIF)
  2494  024B  1283               	bcf	3,5	;RP0=0, select bank0
  2495  024C  1303               	bcf	3,6	;RP1=0, select bank0
  2496  024D  1E8C               	btfss	12,5	;volatile
  2497  024E  2A51               	goto	l1713
  2498                           
  2499                           ;serial.c: 82: return RCREG;
  2500  024F  081A               	movf	26,w	;volatile
  2501  0250  0008               	return
  2502  0251                     l1713:	
  2503                           
  2504                           ;serial.c: 83: else
  2505                           ;serial.c: 84: return 0xA5;
  2506  0251  30A5               	movlw	165
  2507  0252  0008               	return
  2508  0253                     __end_of_serial_rx:	
  2509                           
  2510                           	psect	text6
  2511  012B                     __ptext6:	
  2512 ;; *************** function _serial_init *****************
  2513 ;; Defined at:
  2514 ;;		line 30 in file "serial.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;		None
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;		None
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      void 
  2521 ;; Registers used:
  2522 ;;		wreg
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2528 ;;      Params:         0       0       0       0
  2529 ;;      Locals:         0       0       0       0
  2530 ;;      Temps:          0       0       0       0
  2531 ;;      Totals:         0       0       0       0
  2532 ;;Total ram usage:        0 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; This function calls:
  2535 ;;		Nothing
  2536 ;; This function is called by:
  2537 ;;		_main
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           
  2542                           ;psect for function _serial_init
  2543  012B                     _serial_init:	
  2544                           
  2545                           ;serial.c: 32: SPBRG=25;
  2546                           
  2547                           ;incstack = 0
  2548                           ; Regs used in _serial_init: [wreg]
  2549  012B  3019               	movlw	25
  2550  012C  1683               	bsf	3,5	;RP0=1, select bank1
  2551  012D  1303               	bcf	3,6	;RP1=0, select bank1
  2552  012E  0099               	movwf	25	;volatile
  2553                           
  2554                           ;serial.c: 35: TX9=0;
  2555  012F  1318               	bcf	24,6	;volatile
  2556                           
  2557                           ;serial.c: 36: TXEN=1;
  2558  0130  1698               	bsf	24,5	;volatile
  2559                           
  2560                           ;serial.c: 37: SYNC=0;
  2561  0131  1218               	bcf	24,4	;volatile
  2562                           
  2563                           ;serial.c: 38: BRGH=1;
  2564  0132  1518               	bsf	24,2	;volatile
  2565                           
  2566                           ;serial.c: 39: SPEN=1;
  2567  0133  1283               	bcf	3,5	;RP0=0, select bank0
  2568  0134  1303               	bcf	3,6	;RP1=0, select bank0
  2569  0135  1798               	bsf	24,7	;volatile
  2570                           
  2571                           ;serial.c: 40: RX9=0;
  2572  0136  1318               	bcf	24,6	;volatile
  2573                           
  2574                           ;serial.c: 41: CREN=1;
  2575  0137  1618               	bsf	24,4	;volatile
  2576  0138  0008               	return
  2577  0139                     __end_of_serial_init:	
  2578                           
  2579                           	psect	text7
  2580  02C6                     __ptext7:	
  2581 ;; *************** function _rtc_r *****************
  2582 ;; Defined at:
  2583 ;;		line 44 in file "rtc_r.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;		None
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  tmp             1    6[COMMON] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0, pclath, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2597 ;;      Params:         0       0       0       0
  2598 ;;      Locals:         1       0       0       0
  2599 ;;      Temps:          1       0       0       0
  2600 ;;      Totals:         2       0       0       0
  2601 ;;Total ram usage:        2 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    2
  2604 ;; This function calls:
  2605 ;;		_getd
  2606 ;;		_getu
  2607 ;;		_i2c_rb
  2608 ;;		_i2c_start
  2609 ;;		_i2c_stop
  2610 ;;		_i2c_wb
  2611 ;; This function is called by:
  2612 ;;		_main
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           
  2617                           ;psect for function _rtc_r
  2618  02C6                     _rtc_r:	
  2619                           
  2620                           ;rtc_r.c: 46: unsigned char tmp;
  2621                           ;rtc_r.c: 48: i2c_start();
  2622                           
  2623                           ;incstack = 0
  2624                           ; Regs used in _rtc_r: [wreg+status,2+status,0+pclath+cstack]
  2625  02C6  2100               	fcall	_i2c_start
  2626                           
  2627                           ;rtc_r.c: 49: i2c_wb(0xA2);
  2628  02C7  30A2               	movlw	162
  2629  02C8  2253               	fcall	_i2c_wb
  2630                           
  2631                           ;rtc_r.c: 50: i2c_wb(2);
  2632  02C9  3002               	movlw	2
  2633  02CA  2253               	fcall	_i2c_wb
  2634                           
  2635                           ;rtc_r.c: 52: i2c_start();
  2636  02CB  2100               	fcall	_i2c_start
  2637                           
  2638                           ;rtc_r.c: 53: i2c_wb(0xA3);
  2639  02CC  30A3               	movlw	163
  2640  02CD  2253               	fcall	_i2c_wb
  2641                           
  2642                           ;rtc_r.c: 54: tmp= 0x7F & i2c_rb(0);
  2643  02CE  3000               	movlw	0
  2644  02CF  2522               	fcall	_i2c_rb
  2645  02D0  397F               	andlw	127
  2646  02D1  00F5               	movwf	??_rtc_r
  2647  02D2  0875               	movf	??_rtc_r,w
  2648  02D3  00F6               	movwf	rtc_r@tmp
  2649                           
  2650                           ;rtc_r.c: 55: time[5]=':';
  2651  02D4  303A               	movlw	58
  2652  02D5  00F5               	movwf	??_rtc_r
  2653  02D6  0875               	movf	??_rtc_r,w
  2654  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  2655  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  2656  02D9  00A5               	movwf	_time+5	;volatile
  2657                           
  2658                           ;rtc_r.c: 56: time[6]=getd(tmp);
  2659  02DA  0876               	movf	rtc_r@tmp,w
  2660  02DB  211E               	fcall	_getd
  2661  02DC  00F5               	movwf	??_rtc_r
  2662  02DD  0875               	movf	??_rtc_r,w
  2663  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2664  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  2665  02E0  00A6               	movwf	_time+6	;volatile
  2666                           
  2667                           ;rtc_r.c: 57: time[7]=getu(tmp);
  2668  02E1  0876               	movf	rtc_r@tmp,w
  2669  02E2  20EB               	fcall	_getu
  2670  02E3  00F5               	movwf	??_rtc_r
  2671  02E4  0875               	movf	??_rtc_r,w
  2672  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  2673  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  2674  02E7  00A7               	movwf	_time+7	;volatile
  2675                           
  2676                           ;rtc_r.c: 58: time[8]=0;
  2677  02E8  01A8               	clrf	_time+8	;volatile
  2678                           
  2679                           ;rtc_r.c: 60: tmp= 0x7F & i2c_rb(0);
  2680  02E9  3000               	movlw	0
  2681  02EA  2522               	fcall	_i2c_rb
  2682  02EB  397F               	andlw	127
  2683  02EC  00F5               	movwf	??_rtc_r
  2684  02ED  0875               	movf	??_rtc_r,w
  2685  02EE  00F6               	movwf	rtc_r@tmp
  2686                           
  2687                           ;rtc_r.c: 61: time[2]=':';
  2688  02EF  303A               	movlw	58
  2689  02F0  00F5               	movwf	??_rtc_r
  2690  02F1  0875               	movf	??_rtc_r,w
  2691  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  2692  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  2693  02F4  00A2               	movwf	_time+2	;volatile
  2694                           
  2695                           ;rtc_r.c: 62: time[3]=getd(tmp);
  2696  02F5  0876               	movf	rtc_r@tmp,w
  2697  02F6  211E               	fcall	_getd
  2698  02F7  00F5               	movwf	??_rtc_r
  2699  02F8  0875               	movf	??_rtc_r,w
  2700  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2701  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2702  02FB  00A3               	movwf	_time+3	;volatile
  2703                           
  2704                           ;rtc_r.c: 63: time[4]=getu(tmp);
  2705  02FC  0876               	movf	rtc_r@tmp,w
  2706  02FD  20EB               	fcall	_getu
  2707  02FE  00F5               	movwf	??_rtc_r
  2708  02FF  0875               	movf	??_rtc_r,w
  2709  0300  1283               	bcf	3,5	;RP0=0, select bank0
  2710  0301  1303               	bcf	3,6	;RP1=0, select bank0
  2711  0302  00A4               	movwf	_time+4	;volatile
  2712                           
  2713                           ;rtc_r.c: 65: tmp= 0x3F & i2c_rb(0);
  2714  0303  3000               	movlw	0
  2715  0304  2522               	fcall	_i2c_rb
  2716  0305  393F               	andlw	63
  2717  0306  00F5               	movwf	??_rtc_r
  2718  0307  0875               	movf	??_rtc_r,w
  2719  0308  00F6               	movwf	rtc_r@tmp
  2720                           
  2721                           ;rtc_r.c: 66: time[0]=getd(tmp);
  2722  0309  0876               	movf	rtc_r@tmp,w
  2723  030A  211E               	fcall	_getd
  2724  030B  00F5               	movwf	??_rtc_r
  2725  030C  0875               	movf	??_rtc_r,w
  2726  030D  1283               	bcf	3,5	;RP0=0, select bank0
  2727  030E  1303               	bcf	3,6	;RP1=0, select bank0
  2728  030F  00A0               	movwf	_time	;volatile
  2729                           
  2730                           ;rtc_r.c: 67: time[1]=getu(tmp);
  2731  0310  0876               	movf	rtc_r@tmp,w
  2732  0311  20EB               	fcall	_getu
  2733  0312  00F5               	movwf	??_rtc_r
  2734  0313  0875               	movf	??_rtc_r,w
  2735  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2736  0315  1303               	bcf	3,6	;RP1=0, select bank0
  2737  0316  00A1               	movwf	_time+1	;volatile
  2738                           
  2739                           ;rtc_r.c: 69: tmp= 0x3F & i2c_rb(0);
  2740  0317  3000               	movlw	0
  2741  0318  2522               	fcall	_i2c_rb
  2742  0319  393F               	andlw	63
  2743  031A  00F5               	movwf	??_rtc_r
  2744  031B  0875               	movf	??_rtc_r,w
  2745  031C  00F6               	movwf	rtc_r@tmp
  2746                           
  2747                           ;rtc_r.c: 70: date[0]=getd(tmp);
  2748  031D  0876               	movf	rtc_r@tmp,w
  2749  031E  211E               	fcall	_getd
  2750  031F  00F5               	movwf	??_rtc_r
  2751  0320  0875               	movf	??_rtc_r,w
  2752  0321  1283               	bcf	3,5	;RP0=0, select bank0
  2753  0322  1303               	bcf	3,6	;RP1=0, select bank0
  2754  0323  00AA               	movwf	_date	;volatile
  2755                           
  2756                           ;rtc_r.c: 71: date[1]=getu(tmp);
  2757  0324  0876               	movf	rtc_r@tmp,w
  2758  0325  20EB               	fcall	_getu
  2759  0326  00F5               	movwf	??_rtc_r
  2760  0327  0875               	movf	??_rtc_r,w
  2761  0328  1283               	bcf	3,5	;RP0=0, select bank0
  2762  0329  1303               	bcf	3,6	;RP1=0, select bank0
  2763  032A  00AB               	movwf	_date+1	;volatile
  2764                           
  2765                           ;rtc_r.c: 73: i2c_rb(0);
  2766  032B  3000               	movlw	0
  2767  032C  2522               	fcall	_i2c_rb
  2768                           
  2769                           ;rtc_r.c: 75: tmp= 0x1F & i2c_rb(0);
  2770  032D  3000               	movlw	0
  2771  032E  2522               	fcall	_i2c_rb
  2772  032F  391F               	andlw	31
  2773  0330  00F5               	movwf	??_rtc_r
  2774  0331  0875               	movf	??_rtc_r,w
  2775  0332  00F6               	movwf	rtc_r@tmp
  2776                           
  2777                           ;rtc_r.c: 76: date[2]='/';
  2778  0333  302F               	movlw	47
  2779  0334  00F5               	movwf	??_rtc_r
  2780  0335  0875               	movf	??_rtc_r,w
  2781  0336  1283               	bcf	3,5	;RP0=0, select bank0
  2782  0337  1303               	bcf	3,6	;RP1=0, select bank0
  2783  0338  00AC               	movwf	_date+2	;volatile
  2784                           
  2785                           ;rtc_r.c: 77: date[3]=getd(tmp);
  2786  0339  0876               	movf	rtc_r@tmp,w
  2787  033A  211E               	fcall	_getd
  2788  033B  00F5               	movwf	??_rtc_r
  2789  033C  0875               	movf	??_rtc_r,w
  2790  033D  1283               	bcf	3,5	;RP0=0, select bank0
  2791  033E  1303               	bcf	3,6	;RP1=0, select bank0
  2792  033F  00AD               	movwf	_date+3	;volatile
  2793                           
  2794                           ;rtc_r.c: 78: date[4]=getu(tmp);
  2795  0340  0876               	movf	rtc_r@tmp,w
  2796  0341  20EB               	fcall	_getu
  2797  0342  00F5               	movwf	??_rtc_r
  2798  0343  0875               	movf	??_rtc_r,w
  2799  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2800  0345  1303               	bcf	3,6	;RP1=0, select bank0
  2801  0346  00AE               	movwf	_date+4	;volatile
  2802                           
  2803                           ;rtc_r.c: 80: tmp= i2c_rb(1);
  2804  0347  3001               	movlw	1
  2805  0348  2522               	fcall	_i2c_rb
  2806  0349  00F5               	movwf	??_rtc_r
  2807  034A  0875               	movf	??_rtc_r,w
  2808  034B  00F6               	movwf	rtc_r@tmp
  2809                           
  2810                           ;rtc_r.c: 81: date[5]='/';
  2811  034C  302F               	movlw	47
  2812  034D  00F5               	movwf	??_rtc_r
  2813  034E  0875               	movf	??_rtc_r,w
  2814  034F  1283               	bcf	3,5	;RP0=0, select bank0
  2815  0350  1303               	bcf	3,6	;RP1=0, select bank0
  2816  0351  00AF               	movwf	_date+5	;volatile
  2817                           
  2818                           ;rtc_r.c: 82: date[6]=getd(tmp);
  2819  0352  0876               	movf	rtc_r@tmp,w
  2820  0353  211E               	fcall	_getd
  2821  0354  00F5               	movwf	??_rtc_r
  2822  0355  0875               	movf	??_rtc_r,w
  2823  0356  1283               	bcf	3,5	;RP0=0, select bank0
  2824  0357  1303               	bcf	3,6	;RP1=0, select bank0
  2825  0358  00B0               	movwf	_date+6	;volatile
  2826                           
  2827                           ;rtc_r.c: 83: date[7]=getu(tmp);
  2828  0359  0876               	movf	rtc_r@tmp,w
  2829  035A  20EB               	fcall	_getu
  2830  035B  00F5               	movwf	??_rtc_r
  2831  035C  0875               	movf	??_rtc_r,w
  2832  035D  1283               	bcf	3,5	;RP0=0, select bank0
  2833  035E  1303               	bcf	3,6	;RP1=0, select bank0
  2834  035F  00B1               	movwf	_date+7	;volatile
  2835                           
  2836                           ;rtc_r.c: 84: date[8]=0;
  2837  0360  01B2               	clrf	_date+8	;volatile
  2838                           
  2839                           ;rtc_r.c: 86: i2c_stop();
  2840  0361  210A               	fcall	_i2c_stop
  2841  0362  0008               	return
  2842  0363                     __end_of_rtc_r:	
  2843                           
  2844                           	psect	text8
  2845  00EB                     __ptext8:	
  2846 ;; *************** function _getu *****************
  2847 ;; Defined at:
  2848 ;;		line 38 in file "rtc_r.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  nn              1    wreg     unsigned char 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;  nn              1    0[COMMON] unsigned char 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      unsigned char 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2862 ;;      Params:         0       0       0       0
  2863 ;;      Locals:         1       0       0       0
  2864 ;;      Temps:          0       0       0       0
  2865 ;;      Totals:         1       0       0       0
  2866 ;;Total ram usage:        1 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; This function calls:
  2869 ;;		Nothing
  2870 ;; This function is called by:
  2871 ;;		_rtc_r
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           
  2876                           ;psect for function _getu
  2877  00EB                     _getu:	
  2878                           
  2879                           ;incstack = 0
  2880                           ; Regs used in _getu: [wreg+status,2+status,0]
  2881                           ;getu@nn stored from wreg
  2882  00EB  00F0               	movwf	getu@nn
  2883                           
  2884                           ;rtc_r.c: 40: return (nn & 0x0F)+0x30;
  2885  00EC  0870               	movf	getu@nn,w
  2886  00ED  390F               	andlw	15
  2887  00EE  3E30               	addlw	48
  2888  00EF  0008               	return
  2889  00F0                     __end_of_getu:	
  2890                           
  2891                           	psect	text9
  2892  011E                     __ptext9:	
  2893 ;; *************** function _getd *****************
  2894 ;; Defined at:
  2895 ;;		line 33 in file "rtc_r.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  nn              1    wreg     unsigned char 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  nn              1    1[COMMON] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      unsigned char 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2, status,0
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2909 ;;      Params:         0       0       0       0
  2910 ;;      Locals:         1       0       0       0
  2911 ;;      Temps:          1       0       0       0
  2912 ;;      Totals:         2       0       0       0
  2913 ;;Total ram usage:        2 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_rtc_r
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _getd
  2924  011E                     _getd:	
  2925                           
  2926                           ;incstack = 0
  2927                           ; Regs used in _getd: [wreg+status,2+status,0]
  2928                           ;getd@nn stored from wreg
  2929  011E  00F1               	movwf	getd@nn
  2930                           
  2931                           ;rtc_r.c: 35: return ((nn & 0xF0)>>4)+0x30;
  2932  011F  0871               	movf	getd@nn,w
  2933  0120  00F0               	movwf	??_getd
  2934  0121  3004               	movlw	4
  2935  0122                     u885:	
  2936  0122  1003               	clrc
  2937  0123  0CF0               	rrf	??_getd,f
  2938  0124  3EFF               	addlw	-1
  2939  0125  1D03               	skipz
  2940  0126  2922               	goto	u885
  2941  0127  0870               	movf	??_getd,w
  2942  0128  390F               	andlw	15
  2943  0129  3E30               	addlw	48
  2944  012A  0008               	return
  2945  012B                     __end_of_getd:	
  2946                           
  2947                           	psect	text10
  2948  0198                     __ptext10:	
  2949 ;; *************** function _lcd_str *****************
  2950 ;; Defined at:
  2951 ;;		line 85 in file "lcd.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  str             2    7[COMMON] PTR const unsigned char 
  2954 ;;		 -> STR_25(14), STR_24(4), STR_21(17), STR_18(16), 
  2955 ;;		 -> STR_15(9), STR_14(16), STR_13(15), STR_12(13), 
  2956 ;;		 -> STR_11(10), STR_10(10), STR_9(8), STR_8(17), 
  2957 ;;		 -> STR_7(15), STR_6(17), STR_5(14), STR_4(11), 
  2958 ;;		 -> STR_3(3), STR_2(10), STR_1(10), date(10), 
  2959 ;;		 -> time(10), 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  i               1   10[COMMON] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2971 ;;      Params:         2       0       0       0
  2972 ;;      Locals:         1       0       0       0
  2973 ;;      Temps:          1       0       0       0
  2974 ;;      Totals:         4       0       0       0
  2975 ;;Total ram usage:        4 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    2
  2978 ;; This function calls:
  2979 ;;		_lcd_dat
  2980 ;; This function is called by:
  2981 ;;		_main
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           
  2986                           ;psect for function _lcd_str
  2987  0198                     _lcd_str:	
  2988                           
  2989                           ;lcd.c: 87: unsigned char i=0;
  2990                           
  2991                           ;incstack = 0
  2992                           ; Regs used in _lcd_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2993  0198  01FA               	clrf	lcd_str@i
  2994  0199                     l1613:	
  2995                           ;lcd.c: 89: while(str[i])
  2996                           
  2997  0199  087A               	movf	lcd_str@i,w
  2998  019A  0777               	addwf	lcd_str@str,w
  2999  019B  0084               	movwf	4
  3000  019C  0878               	movf	lcd_str@str+1,w
  3001  019D  1803               	skipnc
  3002  019E  0A78               	incf	lcd_str@str+1,w
  3003  019F  1283               	bcf	3,5	;RP0=0, select bank0
  3004  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  3005  01A1  00FF               	movwf	127
  3006  01A2  2400               	fcall	stringtab
  3007  01A3  3A00               	xorlw	0
  3008  01A4  1903               	btfsc	3,2
  3009  01A5  0008               	return
  3010                           
  3011                           ;lcd.c: 90: {
  3012                           ;lcd.c: 91: lcd_dat(str[i]);
  3013  01A6  087A               	movf	lcd_str@i,w
  3014  01A7  0777               	addwf	lcd_str@str,w
  3015  01A8  0084               	movwf	4
  3016  01A9  0878               	movf	lcd_str@str+1,w
  3017  01AA  1803               	skipnc
  3018  01AB  0A78               	incf	lcd_str@str+1,w
  3019  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  3020  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  3021  01AE  00FF               	movwf	127
  3022  01AF  2400               	fcall	stringtab
  3023  01B0  217E               	fcall	_lcd_dat
  3024                           
  3025                           ;lcd.c: 92: i++;
  3026  01B1  3001               	movlw	1
  3027  01B2  00F9               	movwf	??_lcd_str
  3028  01B3  0879               	movf	??_lcd_str,w
  3029  01B4  07FA               	addwf	lcd_str@i,f
  3030  01B5  2999               	goto	l1613
  3031  01B6                     __end_of_lcd_str:	
  3032                           
  3033                           	psect	text11
  3034  017E                     __ptext11:	
  3035 ;; *************** function _lcd_dat *****************
  3036 ;; Defined at:
  3037 ;;		line 55 in file "lcd.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  val             1    wreg     unsigned char 
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;  val             1    6[COMMON] unsigned char 
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2, status,0, pclath, cstack
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3051 ;;      Params:         0       0       0       0
  3052 ;;      Locals:         1       0       0       0
  3053 ;;      Temps:          0       0       0       0
  3054 ;;      Totals:         1       0       0       0
  3055 ;;Total ram usage:        1 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    1
  3058 ;; This function calls:
  3059 ;;		_atraso_ms
  3060 ;;		_lcd_wr
  3061 ;; This function is called by:
  3062 ;;		_lcd_str
  3063 ;;		_main
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           
  3068                           ;psect for function _lcd_dat
  3069  017E                     _lcd_dat:	
  3070                           
  3071                           ;incstack = 0
  3072                           ; Regs used in _lcd_dat: [wreg+status,2+status,0+pclath+cstack]
  3073                           ;lcd_dat@val stored from wreg
  3074  017E  00F6               	movwf	lcd_dat@val
  3075                           
  3076                           ;lcd.c: 57: RA0=1;
  3077  017F  1283               	bcf	3,5	;RP0=0, select bank0
  3078  0180  1303               	bcf	3,6	;RP1=0, select bank0
  3079  0181  1405               	bsf	5,0	;volatile
  3080                           
  3081                           ;lcd.c: 58: lcd_wr(val);
  3082  0182  0876               	movf	lcd_dat@val,w
  3083  0183  21D9               	fcall	_lcd_wr
  3084                           
  3085                           ;lcd.c: 59: RB3=1;
  3086  0184  1283               	bcf	3,5	;RP0=0, select bank0
  3087  0185  1303               	bcf	3,6	;RP1=0, select bank0
  3088  0186  1586               	bsf	6,3	;volatile
  3089                           
  3090                           ;lcd.c: 60: atraso_ms(3);
  3091  0187  3003               	movlw	3
  3092  0188  00F0               	movwf	atraso_ms@valor
  3093  0189  3000               	movlw	0
  3094  018A  00F1               	movwf	atraso_ms@valor+1
  3095  018B  21B6               	fcall	_atraso_ms
  3096                           
  3097                           ;lcd.c: 61: RA0=0;
  3098  018C  1283               	bcf	3,5	;RP0=0, select bank0
  3099  018D  1303               	bcf	3,6	;RP1=0, select bank0
  3100  018E  1005               	bcf	5,0	;volatile
  3101                           
  3102                           ;lcd.c: 62: atraso_ms(3);
  3103  018F  3003               	movlw	3
  3104  0190  00F0               	movwf	atraso_ms@valor
  3105  0191  3000               	movlw	0
  3106  0192  00F1               	movwf	atraso_ms@valor+1
  3107  0193  21B6               	fcall	_atraso_ms
  3108                           
  3109                           ;lcd.c: 63: RA0=1;
  3110  0194  1283               	bcf	3,5	;RP0=0, select bank0
  3111  0195  1303               	bcf	3,6	;RP1=0, select bank0
  3112  0196  1405               	bsf	5,0	;volatile
  3113  0197  0008               	return
  3114  0198                     __end_of_lcd_dat:	
  3115                           
  3116                           	psect	text12
  3117  01FE                     __ptext12:	
  3118 ;; *************** function _lcd_init *****************
  3119 ;; Defined at:
  3120 ;;		line 66 in file "lcd.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;		None
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;		None
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  1    wreg      void 
  3127 ;; Registers used:
  3128 ;;		wreg, status,2, status,0, pclath, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3134 ;;      Params:         0       0       0       0
  3135 ;;      Locals:         0       0       0       0
  3136 ;;      Temps:          0       0       0       0
  3137 ;;      Totals:         0       0       0       0
  3138 ;;Total ram usage:        0 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    2
  3141 ;; This function calls:
  3142 ;;		_atraso_ms
  3143 ;;		_lcd_cmd
  3144 ;; This function is called by:
  3145 ;;		_main
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           
  3150                           ;psect for function _lcd_init
  3151  01FE                     _lcd_init:	
  3152                           
  3153                           ;lcd.c: 68: RA0=0;
  3154                           
  3155                           ;incstack = 0
  3156                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  3157  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  3158  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  3159  0200  1005               	bcf	5,0	;volatile
  3160                           
  3161                           ;lcd.c: 69: RB3=0;
  3162  0201  1186               	bcf	6,3	;volatile
  3163                           
  3164                           ;lcd.c: 70: atraso_ms(20);
  3165  0202  3014               	movlw	20
  3166  0203  00F0               	movwf	atraso_ms@valor
  3167  0204  3000               	movlw	0
  3168  0205  00F1               	movwf	atraso_ms@valor+1
  3169  0206  21B6               	fcall	_atraso_ms
  3170                           
  3171                           ;lcd.c: 71: RA0=1;
  3172  0207  1283               	bcf	3,5	;RP0=0, select bank0
  3173  0208  1303               	bcf	3,6	;RP1=0, select bank0
  3174  0209  1405               	bsf	5,0	;volatile
  3175                           
  3176                           ;lcd.c: 73: lcd_cmd(0x30);
  3177  020A  3030               	movlw	48
  3178  020B  2164               	fcall	_lcd_cmd
  3179                           
  3180                           ;lcd.c: 74: atraso_ms(5);
  3181  020C  3005               	movlw	5
  3182  020D  00F0               	movwf	atraso_ms@valor
  3183  020E  3000               	movlw	0
  3184  020F  00F1               	movwf	atraso_ms@valor+1
  3185  0210  21B6               	fcall	_atraso_ms
  3186                           
  3187                           ;lcd.c: 75: lcd_cmd(0x30);
  3188  0211  3030               	movlw	48
  3189  0212  2164               	fcall	_lcd_cmd
  3190                           
  3191                           ;lcd.c: 76: atraso_ms(1);
  3192  0213  3001               	movlw	1
  3193  0214  00F0               	movwf	atraso_ms@valor
  3194  0215  3000               	movlw	0
  3195  0216  00F1               	movwf	atraso_ms@valor+1
  3196  0217  21B6               	fcall	_atraso_ms
  3197                           
  3198                           ;lcd.c: 77: lcd_cmd(0x38);
  3199  0218  3038               	movlw	56
  3200  0219  2164               	fcall	_lcd_cmd
  3201                           
  3202                           ;lcd.c: 78: lcd_cmd(0x08);
  3203  021A  3008               	movlw	8
  3204  021B  2164               	fcall	_lcd_cmd
  3205                           
  3206                           ;lcd.c: 79: lcd_cmd(0x0F);
  3207  021C  300F               	movlw	15
  3208  021D  2164               	fcall	_lcd_cmd
  3209                           
  3210                           ;lcd.c: 80: lcd_cmd(0x01);
  3211  021E  3001               	movlw	1
  3212  021F  2164               	fcall	_lcd_cmd
  3213                           
  3214                           ;lcd.c: 81: lcd_cmd(0x38);
  3215  0220  3038               	movlw	56
  3216  0221  2164               	fcall	_lcd_cmd
  3217                           
  3218                           ;lcd.c: 82: lcd_cmd(0x80);
  3219  0222  3080               	movlw	128
  3220  0223  2164               	fcall	_lcd_cmd
  3221  0224  0008               	return
  3222  0225                     __end_of_lcd_init:	
  3223                           
  3224                           	psect	text13
  3225  0164                     __ptext13:	
  3226 ;; *************** function _lcd_cmd *****************
  3227 ;; Defined at:
  3228 ;;		line 44 in file "lcd.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;  val             1    wreg     unsigned char 
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  val             1    6[COMMON] unsigned char 
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  1    wreg      void 
  3235 ;; Registers used:
  3236 ;;		wreg, status,2, status,0, pclath, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3242 ;;      Params:         0       0       0       0
  3243 ;;      Locals:         1       0       0       0
  3244 ;;      Temps:          0       0       0       0
  3245 ;;      Totals:         1       0       0       0
  3246 ;;Total ram usage:        1 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    1
  3249 ;; This function calls:
  3250 ;;		_atraso_ms
  3251 ;;		_lcd_wr
  3252 ;; This function is called by:
  3253 ;;		_lcd_init
  3254 ;;		_main
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           
  3259                           ;psect for function _lcd_cmd
  3260  0164                     _lcd_cmd:	
  3261                           
  3262                           ;incstack = 0
  3263                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  3264                           ;lcd_cmd@val stored from wreg
  3265  0164  00F6               	movwf	lcd_cmd@val
  3266                           
  3267                           ;lcd.c: 46: RA0=1;
  3268  0165  1283               	bcf	3,5	;RP0=0, select bank0
  3269  0166  1303               	bcf	3,6	;RP1=0, select bank0
  3270  0167  1405               	bsf	5,0	;volatile
  3271                           
  3272                           ;lcd.c: 47: lcd_wr(val);
  3273  0168  0876               	movf	lcd_cmd@val,w
  3274  0169  21D9               	fcall	_lcd_wr
  3275                           
  3276                           ;lcd.c: 48: RB3=0;
  3277  016A  1283               	bcf	3,5	;RP0=0, select bank0
  3278  016B  1303               	bcf	3,6	;RP1=0, select bank0
  3279  016C  1186               	bcf	6,3	;volatile
  3280                           
  3281                           ;lcd.c: 49: atraso_ms(3);
  3282  016D  3003               	movlw	3
  3283  016E  00F0               	movwf	atraso_ms@valor
  3284  016F  3000               	movlw	0
  3285  0170  00F1               	movwf	atraso_ms@valor+1
  3286  0171  21B6               	fcall	_atraso_ms
  3287                           
  3288                           ;lcd.c: 50: RA0=0;
  3289  0172  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0173  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0174  1005               	bcf	5,0	;volatile
  3292                           
  3293                           ;lcd.c: 51: atraso_ms(3);
  3294  0175  3003               	movlw	3
  3295  0176  00F0               	movwf	atraso_ms@valor
  3296  0177  3000               	movlw	0
  3297  0178  00F1               	movwf	atraso_ms@valor+1
  3298  0179  21B6               	fcall	_atraso_ms
  3299                           
  3300                           ;lcd.c: 52: RA0=1;
  3301  017A  1283               	bcf	3,5	;RP0=0, select bank0
  3302  017B  1303               	bcf	3,6	;RP1=0, select bank0
  3303  017C  1405               	bsf	5,0	;volatile
  3304  017D  0008               	return
  3305  017E                     __end_of_lcd_cmd:	
  3306                           
  3307                           	psect	text14
  3308  01D9                     __ptext14:	
  3309 ;; *************** function _lcd_wr *****************
  3310 ;; Defined at:
  3311 ;;		line 30 in file "lcd.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  val             1    wreg     unsigned char 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  val             1    1[COMMON] unsigned char 
  3316 ;;  i               1    2[COMMON] unsigned char 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3326 ;;      Params:         0       0       0       0
  3327 ;;      Locals:         2       0       0       0
  3328 ;;      Temps:          1       0       0       0
  3329 ;;      Totals:         3       0       0       0
  3330 ;;Total ram usage:        3 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; This function calls:
  3333 ;;		Nothing
  3334 ;; This function is called by:
  3335 ;;		_lcd_cmd
  3336 ;;		_lcd_dat
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _lcd_wr
  3342  01D9                     _lcd_wr:	
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _lcd_wr: [wreg+status,2+status,0]
  3346                           ;lcd_wr@val stored from wreg
  3347  01D9  00F1               	movwf	lcd_wr@val
  3348                           
  3349                           ;lcd.c: 32: unsigned char i;
  3350                           ;lcd.c: 34: RB4=0;
  3351  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  3352  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  3353  01DC  1206               	bcf	6,4	;volatile
  3354                           
  3355                           ;lcd.c: 36: for(i=0;i<8;i++)
  3356  01DD  01F2               	clrf	lcd_wr@i
  3357  01DE                     L4:	
  3358  01DE  3008               	movlw	8
  3359  01DF  0272               	subwf	lcd_wr@i,w
  3360  01E0  1803               	btfsc	3,0
  3361  01E1  0008               	return
  3362                           
  3363                           ;lcd.c: 37: {
  3364                           ;lcd.c: 38: RB3=((val>>(7-i))&0x01);
  3365  01E2  0871               	movf	lcd_wr@val,w
  3366  01E3  00F0               	movwf	??_lcd_wr
  3367  01E4  0372               	decf	lcd_wr@i,w
  3368  01E5  3AFF               	xorlw	255
  3369  01E6  3E07               	addlw	7
  3370  01E7  3E01               	addlw	1
  3371  01E8  29EB               	goto	u844
  3372  01E9                     u845:	
  3373  01E9  1003               	clrc
  3374  01EA  0CF0               	rrf	??_lcd_wr,f
  3375  01EB                     u844:	
  3376  01EB  3EFF               	addlw	-1
  3377  01EC  1D03               	skipz
  3378  01ED  29E9               	goto	u845
  3379  01EE  1C70               	btfss	??_lcd_wr,0
  3380  01EF  29F4               	goto	u850
  3381  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  3382  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  3383  01F2  1586               	bsf	6,3	;volatile
  3384  01F3  29F7               	goto	l1507
  3385  01F4                     u850:	
  3386  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  3387  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  3388  01F6  1186               	bcf	6,3	;volatile
  3389  01F7                     l1507:	
  3390                           
  3391                           ;lcd.c: 39: RB4=1;
  3392  01F7  1606               	bsf	6,4	;volatile
  3393                           
  3394                           ;lcd.c: 40: RB4=0;
  3395  01F8  1206               	bcf	6,4	;volatile
  3396  01F9  3001               	movlw	1
  3397  01FA  00F0               	movwf	??_lcd_wr
  3398  01FB  0870               	movf	??_lcd_wr,w
  3399  01FC  07F2               	addwf	lcd_wr@i,f
  3400  01FD  29DE               	goto	L4
  3401  01FE                     __end_of_lcd_wr:	
  3402                           
  3403                           	psect	text15
  3404  01B6                     __ptext15:	
  3405 ;; *************** function _atraso_ms *****************
  3406 ;; Defined at:
  3407 ;;		line 26 in file "atraso.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  valor           2    0[COMMON] unsigned int 
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;  i               2    3[COMMON] unsigned int 
  3412 ;;  j               1    5[COMMON] unsigned char 
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3422 ;;      Params:         2       0       0       0
  3423 ;;      Locals:         3       0       0       0
  3424 ;;      Temps:          1       0       0       0
  3425 ;;      Totals:         6       0       0       0
  3426 ;;Total ram usage:        6 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; This function calls:
  3429 ;;		Nothing
  3430 ;; This function is called by:
  3431 ;;		_lcd_cmd
  3432 ;;		_lcd_dat
  3433 ;;		_lcd_init
  3434 ;;		_serial_rx
  3435 ;;		_tc_tecla
  3436 ;;		_main
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           
  3441                           ;psect for function _atraso_ms
  3442  01B6                     _atraso_ms:	
  3443                           
  3444                           ;atraso.c: 28: unsigned int i;
  3445                           ;atraso.c: 29: unsigned char j;
  3446                           ;atraso.c: 31: for (i =0; i< valor; i++)
  3447                           
  3448                           ;incstack = 0
  3449                           ; Regs used in _atraso_ms: [wreg+status,2+status,0]
  3450  01B6  01F3               	clrf	atraso_ms@i
  3451  01B7  01F4               	clrf	atraso_ms@i+1
  3452  01B8                     l3:	
  3453  01B8  0871               	movf	atraso_ms@valor+1,w
  3454  01B9  0274               	subwf	atraso_ms@i+1,w
  3455  01BA  1D03               	skipz
  3456  01BB  29BE               	goto	u735
  3457  01BC  0870               	movf	atraso_ms@valor,w
  3458  01BD  0273               	subwf	atraso_ms@i,w
  3459  01BE                     u735:	
  3460  01BE  1803               	btfsc	3,0
  3461  01BF  0008               	return
  3462                           
  3463                           ;atraso.c: 32: {
  3464                           ;atraso.c: 33: for (j =0 ; j < 200; j++)
  3465  01C0  01F5               	clrf	atraso_ms@j
  3466  01C1  30C8               	movlw	200
  3467  01C2  0275               	subwf	atraso_ms@j,w
  3468  01C3  1803               	btfsc	3,0
  3469  01C4  29D2               	goto	l1421
  3470  01C5                     l5:	
  3471  01C5  0000               	nop	;# 
  3472  01C6  0000               	nop	;# 
  3473  01C7  0000               	nop	;# 
  3474  01C8  0000               	nop	;# 
  3475  01C9  0000               	nop	;# 
  3476  01CA  3001               	movlw	1
  3477  01CB  00F2               	movwf	??_atraso_ms
  3478  01CC  0872               	movf	??_atraso_ms,w
  3479  01CD  07F5               	addwf	atraso_ms@j,f
  3480  01CE  30C8               	movlw	200
  3481  01CF  0275               	subwf	atraso_ms@j,w
  3482  01D0  1C03               	skipc
  3483  01D1  29C5               	goto	l5
  3484  01D2                     l1421:	
  3485  01D2  3001               	movlw	1
  3486  01D3  07F3               	addwf	atraso_ms@i,f
  3487  01D4  1803               	skipnc
  3488  01D5  0AF4               	incf	atraso_ms@i+1,f
  3489  01D6  3000               	movlw	0
  3490  01D7  07F4               	addwf	atraso_ms@i+1,f
  3491  01D8  29B8               	goto	l3
  3492  01D9                     __end_of_atraso_ms:	
  3493                           
  3494                           	psect	text16
  3495  00F0                     __ptext16:	
  3496 ;; *************** function _i2c_init *****************
  3497 ;; Defined at:
  3498 ;;		line 39 in file "i2c.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;		None
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		None
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3512 ;;      Params:         0       0       0       0
  3513 ;;      Locals:         0       0       0       0
  3514 ;;      Temps:          0       0       0       0
  3515 ;;      Totals:         0       0       0       0
  3516 ;;Total ram usage:        0 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_main
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _i2c_init
  3527  00F0                     _i2c_init:	
  3528                           
  3529                           ;i2c.c: 41: TRISA4=0;
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in _i2c_init: []
  3533  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  3534  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  3535  00F2  1205               	bcf	5,4	;volatile
  3536                           
  3537                           ;i2c.c: 42: RA3=1;
  3538  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  3539  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  3540  00F5  1585               	bsf	5,3	;volatile
  3541                           
  3542                           ;i2c.c: 43: RA4=1;
  3543  00F6  1605               	bsf	5,4	;volatile
  3544  00F7  0008               	return
  3545  00F8                     __end_of_i2c_init:	
  3546                           
  3547                           	psect	text17
  3548  0288                     __ptext17:	
  3549 ;; *************** function _e2pext_w *****************
  3550 ;; Defined at:
  3551 ;;		line 49 in file "eeprom_ext.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;  addr            2   11[COMMON] unsigned int 
  3554 ;;  val             1   13[COMMON] unsigned char 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  tmp             2    5[BANK0 ] unsigned int 
  3557 ;;  nt              1    4[BANK0 ] unsigned char 
  3558 ;;  al              1    3[BANK0 ] unsigned char 
  3559 ;;  ah              1    2[BANK0 ] unsigned char 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0, pclath, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3569 ;;      Params:         3       0       0       0
  3570 ;;      Locals:         0       5       0       0
  3571 ;;      Temps:          0       2       0       0
  3572 ;;      Totals:         3       7       0       0
  3573 ;;Total ram usage:       10 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    3
  3576 ;; This function calls:
  3577 ;;		_e2pext_r
  3578 ;;		_i2c_start
  3579 ;;		_i2c_stop
  3580 ;;		_i2c_wb
  3581 ;; This function is called by:
  3582 ;;		_main
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           
  3587                           ;psect for function _e2pext_w
  3588  0288                     _e2pext_w:	
  3589                           
  3590                           ;eeprom_ext.c: 51: unsigned int tmp=val;
  3591                           
  3592                           ;incstack = 0
  3593                           ; Regs used in _e2pext_w: [wreg+status,2+status,0+pclath+cstack]
  3594  0288  087D               	movf	e2pext_w@val,w
  3595  0289  1283               	bcf	3,5	;RP0=0, select bank0
  3596  028A  1303               	bcf	3,6	;RP1=0, select bank0
  3597  028B  00B4               	movwf	??_e2pext_w
  3598  028C  01B5               	clrf	??_e2pext_w+1
  3599  028D  0834               	movf	??_e2pext_w,w
  3600  028E  00B9               	movwf	e2pext_w@tmp
  3601  028F  0835               	movf	??_e2pext_w+1,w
  3602  0290  00BA               	movwf	e2pext_w@tmp+1
  3603                           
  3604                           ;eeprom_ext.c: 52: unsigned char ah=(addr&0xFF00)>>8;
  3605  0291  087C               	movf	e2pext_w@addr+1,w
  3606  0292  00B4               	movwf	??_e2pext_w
  3607  0293  0834               	movf	??_e2pext_w,w
  3608  0294  00B6               	movwf	e2pext_w@ah
  3609                           
  3610                           ;eeprom_ext.c: 53: unsigned char al=addr&0x00FF;
  3611  0295  087B               	movf	e2pext_w@addr,w
  3612  0296  00B4               	movwf	??_e2pext_w
  3613  0297  0834               	movf	??_e2pext_w,w
  3614  0298  00B7               	movwf	e2pext_w@al
  3615                           
  3616                           ;eeprom_ext.c: 54: unsigned char nt=0;
  3617  0299  01B8               	clrf	e2pext_w@nt
  3618  029A                     l1589:	
  3619                           ;eeprom_ext.c: 56: do
  3620                           
  3621                           
  3622                           ;eeprom_ext.c: 57: {
  3623                           ;eeprom_ext.c: 58: i2c_start();
  3624  029A  2100               	fcall	_i2c_start
  3625                           
  3626                           ;eeprom_ext.c: 59: i2c_wb(0xA0);
  3627  029B  30A0               	movlw	160
  3628  029C  2253               	fcall	_i2c_wb
  3629                           
  3630                           ;eeprom_ext.c: 60: i2c_wb(ah);
  3631  029D  1283               	bcf	3,5	;RP0=0, select bank0
  3632  029E  1303               	bcf	3,6	;RP1=0, select bank0
  3633  029F  0836               	movf	e2pext_w@ah,w
  3634  02A0  2253               	fcall	_i2c_wb
  3635                           
  3636                           ;eeprom_ext.c: 61: i2c_wb(al);
  3637  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  3638  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  3639  02A3  0837               	movf	e2pext_w@al,w
  3640  02A4  2253               	fcall	_i2c_wb
  3641                           
  3642                           ;eeprom_ext.c: 62: i2c_wb(tmp);
  3643  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  3644  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  3645  02A7  0839               	movf	e2pext_w@tmp,w
  3646  02A8  2253               	fcall	_i2c_wb
  3647                           
  3648                           ;eeprom_ext.c: 63: i2c_stop();
  3649  02A9  210A               	fcall	_i2c_stop
  3650                           
  3651                           ;eeprom_ext.c: 65: nt++;
  3652  02AA  3001               	movlw	1
  3653  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  3654  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  3655  02AD  00B4               	movwf	??_e2pext_w
  3656  02AE  0834               	movf	??_e2pext_w,w
  3657  02AF  07B8               	addwf	e2pext_w@nt,f
  3658                           
  3659                           ;eeprom_ext.c: 66: }
  3660                           ;eeprom_ext.c: 67: while((tmp != e2pext_r(addr))&&(nt < 10));
  3661  02B0  087C               	movf	e2pext_w@addr+1,w
  3662  02B1  00F6               	movwf	e2pext_r@addr+1
  3663  02B2  087B               	movf	e2pext_w@addr,w
  3664  02B3  00F5               	movwf	e2pext_r@addr
  3665  02B4  214A               	fcall	_e2pext_r
  3666  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  3667  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  3668  02B7  00B4               	movwf	??_e2pext_w
  3669  02B8  01B5               	clrf	??_e2pext_w+1
  3670  02B9  083A               	movf	e2pext_w@tmp+1,w
  3671  02BA  0635               	xorwf	??_e2pext_w+1,w
  3672  02BB  1D03               	skipz
  3673  02BC  2ABF               	goto	u925
  3674  02BD  0839               	movf	e2pext_w@tmp,w
  3675  02BE  0634               	xorwf	??_e2pext_w,w
  3676  02BF                     u925:	
  3677  02BF  1903               	skipnz
  3678  02C0  0008               	return
  3679  02C1  300A               	movlw	10
  3680  02C2  0238               	subwf	e2pext_w@nt,w
  3681  02C3  1803               	btfsc	3,0
  3682  02C4  0008               	return
  3683  02C5  2A9A               	goto	l1589
  3684  02C6                     __end_of_e2pext_w:	
  3685                           
  3686                           	psect	text18
  3687  014A                     __ptext18:	
  3688 ;; *************** function _e2pext_r *****************
  3689 ;; Defined at:
  3690 ;;		line 29 in file "eeprom_ext.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  addr            2    5[COMMON] unsigned int 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  al              1   10[COMMON] unsigned char 
  3695 ;;  ah              1    9[COMMON] unsigned char 
  3696 ;;  ret             1    8[COMMON] unsigned char 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      unsigned char 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0, pclath, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3706 ;;      Params:         2       0       0       0
  3707 ;;      Locals:         3       0       0       0
  3708 ;;      Temps:          1       0       0       0
  3709 ;;      Totals:         6       0       0       0
  3710 ;;Total ram usage:        6 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    2
  3713 ;; This function calls:
  3714 ;;		_i2c_rb
  3715 ;;		_i2c_start
  3716 ;;		_i2c_stop
  3717 ;;		_i2c_wb
  3718 ;; This function is called by:
  3719 ;;		_e2pext_w
  3720 ;;		_main
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           
  3725                           ;psect for function _e2pext_r
  3726  014A                     _e2pext_r:	
  3727                           
  3728                           ;eeprom_ext.c: 31: unsigned char ret;
  3729                           ;eeprom_ext.c: 32: unsigned char ah=(addr&0xFF00)>>8;
  3730                           
  3731                           ;incstack = 0
  3732                           ; Regs used in _e2pext_r: [wreg+status,2+status,0+pclath+cstack]
  3733  014A  0876               	movf	e2pext_r@addr+1,w
  3734  014B  00F7               	movwf	??_e2pext_r
  3735  014C  0877               	movf	??_e2pext_r,w
  3736  014D  00F9               	movwf	e2pext_r@ah
  3737                           
  3738                           ;eeprom_ext.c: 33: unsigned char al=addr&0x00FF;
  3739  014E  0875               	movf	e2pext_r@addr,w
  3740  014F  00F7               	movwf	??_e2pext_r
  3741  0150  0877               	movf	??_e2pext_r,w
  3742  0151  00FA               	movwf	e2pext_r@al
  3743                           
  3744                           ;eeprom_ext.c: 35: i2c_start();
  3745  0152  2100               	fcall	_i2c_start
  3746                           
  3747                           ;eeprom_ext.c: 36: i2c_wb(0xA0);
  3748  0153  30A0               	movlw	160
  3749  0154  2253               	fcall	_i2c_wb
  3750                           
  3751                           ;eeprom_ext.c: 37: i2c_wb(ah);
  3752  0155  0879               	movf	e2pext_r@ah,w
  3753  0156  2253               	fcall	_i2c_wb
  3754                           
  3755                           ;eeprom_ext.c: 38: i2c_wb(al);
  3756  0157  087A               	movf	e2pext_r@al,w
  3757  0158  2253               	fcall	_i2c_wb
  3758                           
  3759                           ;eeprom_ext.c: 40: i2c_start();
  3760  0159  2100               	fcall	_i2c_start
  3761                           
  3762                           ;eeprom_ext.c: 41: i2c_wb(0xA1);
  3763  015A  30A1               	movlw	161
  3764  015B  2253               	fcall	_i2c_wb
  3765                           
  3766                           ;eeprom_ext.c: 42: ret=i2c_rb(1);
  3767  015C  3001               	movlw	1
  3768  015D  2522               	fcall	_i2c_rb
  3769  015E  00F7               	movwf	??_e2pext_r
  3770  015F  0877               	movf	??_e2pext_r,w
  3771  0160  00F8               	movwf	e2pext_r@ret
  3772                           
  3773                           ;eeprom_ext.c: 43: i2c_stop();
  3774  0161  210A               	fcall	_i2c_stop
  3775                           
  3776                           ;eeprom_ext.c: 45: return ret;
  3777  0162  0878               	movf	e2pext_r@ret,w
  3778  0163  0008               	return
  3779  0164                     __end_of_e2pext_r:	
  3780                           
  3781                           	psect	text19
  3782  0253                     __ptext19:	
  3783 ;; *************** function _i2c_wb *****************
  3784 ;; Defined at:
  3785 ;;		line 64 in file "i2c.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;  val             1    wreg     unsigned char 
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;  val             1    1[COMMON] unsigned char 
  3790 ;;  i               1    2[COMMON] unsigned char 
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		wreg, status,2, status,0, pclath, cstack
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3800 ;;      Params:         0       0       0       0
  3801 ;;      Locals:         2       0       0       0
  3802 ;;      Temps:          1       0       0       0
  3803 ;;      Totals:         3       0       0       0
  3804 ;;Total ram usage:        3 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; Hardware stack levels required when called:    1
  3807 ;; This function calls:
  3808 ;;		_delay
  3809 ;; This function is called by:
  3810 ;;		_e2pext_r
  3811 ;;		_e2pext_w
  3812 ;;		_rtc_r
  3813 ;;		_rtc_w
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           
  3818                           ;psect for function _i2c_wb
  3819  0253                     _i2c_wb:	
  3820                           
  3821                           ;incstack = 0
  3822                           ; Regs used in _i2c_wb: [wreg+status,2+status,0+pclath+cstack]
  3823                           ;i2c_wb@val stored from wreg
  3824  0253  00F1               	movwf	i2c_wb@val
  3825                           
  3826                           ;i2c.c: 66: unsigned char i;
  3827                           ;i2c.c: 67: RA3=0;
  3828  0254  1283               	bcf	3,5	;RP0=0, select bank0
  3829  0255  1303               	bcf	3,6	;RP1=0, select bank0
  3830  0256  1185               	bcf	5,3	;volatile
  3831                           
  3832                           ;i2c.c: 68: for(i=0;i<8;i++)
  3833  0257  01F2               	clrf	i2c_wb@i
  3834  0258  3008               	movlw	8
  3835  0259  0272               	subwf	i2c_wb@i,w
  3836  025A  1803               	btfsc	3,0
  3837  025B  2A7E               	goto	l48
  3838  025C                     l1437:	
  3839                           
  3840                           ;i2c.c: 69: {
  3841                           ;i2c.c: 70: RA4=((val>>(7-i))& 0x01);
  3842  025C  0871               	movf	i2c_wb@val,w
  3843  025D  00F0               	movwf	??_i2c_wb
  3844  025E  0372               	decf	i2c_wb@i,w
  3845  025F  3AFF               	xorlw	255
  3846  0260  3E07               	addlw	7
  3847  0261  3E01               	addlw	1
  3848  0262  2A65               	goto	u754
  3849  0263                     u755:	
  3850  0263  1003               	clrc
  3851  0264  0CF0               	rrf	??_i2c_wb,f
  3852  0265                     u754:	
  3853  0265  3EFF               	addlw	-1
  3854  0266  1D03               	skipz
  3855  0267  2A63               	goto	u755
  3856  0268  1C70               	btfss	??_i2c_wb,0
  3857  0269  2A6E               	goto	u760
  3858  026A  1283               	bcf	3,5	;RP0=0, select bank0
  3859  026B  1303               	bcf	3,6	;RP1=0, select bank0
  3860  026C  1605               	bsf	5,4	;volatile
  3861  026D  2A71               	goto	l1439
  3862  026E                     u760:	
  3863  026E  1283               	bcf	3,5	;RP0=0, select bank0
  3864  026F  1303               	bcf	3,6	;RP1=0, select bank0
  3865  0270  1205               	bcf	5,4	;volatile
  3866  0271                     l1439:	
  3867                           
  3868                           ;i2c.c: 71: RA3=1;
  3869  0271  1585               	bsf	5,3	;volatile
  3870                           
  3871                           ;i2c.c: 72: delay();
  3872  0272  20E6               	fcall	_delay
  3873                           
  3874                           ;i2c.c: 73: RA3=0;
  3875  0273  1283               	bcf	3,5	;RP0=0, select bank0
  3876  0274  1303               	bcf	3,6	;RP1=0, select bank0
  3877  0275  1185               	bcf	5,3	;volatile
  3878  0276  3001               	movlw	1
  3879  0277  00F0               	movwf	??_i2c_wb
  3880  0278  0870               	movf	??_i2c_wb,w
  3881  0279  07F2               	addwf	i2c_wb@i,f
  3882  027A  3008               	movlw	8
  3883  027B  0272               	subwf	i2c_wb@i,w
  3884  027C  1C03               	skipc
  3885  027D  2A5C               	goto	l1437
  3886  027E                     l48:	
  3887                           
  3888                           ;i2c.c: 74: }
  3889                           ;i2c.c: 75: RA4=1;
  3890  027E  1605               	bsf	5,4	;volatile
  3891                           
  3892                           ;i2c.c: 76: delay();
  3893  027F  20E6               	fcall	_delay
  3894                           
  3895                           ;i2c.c: 77: RA3=1;
  3896  0280  1283               	bcf	3,5	;RP0=0, select bank0
  3897  0281  1303               	bcf	3,6	;RP1=0, select bank0
  3898  0282  1585               	bsf	5,3	;volatile
  3899                           
  3900                           ;i2c.c: 78: delay();
  3901  0283  20E6               	fcall	_delay
  3902                           
  3903                           ;i2c.c: 79: RA3=0;
  3904  0284  1283               	bcf	3,5	;RP0=0, select bank0
  3905  0285  1303               	bcf	3,6	;RP1=0, select bank0
  3906  0286  1185               	bcf	5,3	;volatile
  3907  0287  0008               	return
  3908  0288                     __end_of_i2c_wb:	
  3909                           
  3910                           	psect	text20
  3911  010A                     __ptext20:	
  3912 ;; *************** function _i2c_stop *****************
  3913 ;; Defined at:
  3914 ;;		line 55 in file "i2c.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;		None
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;		None
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  1    wreg      void 
  3921 ;; Registers used:
  3922 ;;		status,2, status,0, pclath, cstack
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3928 ;;      Params:         0       0       0       0
  3929 ;;      Locals:         0       0       0       0
  3930 ;;      Temps:          0       0       0       0
  3931 ;;      Totals:         0       0       0       0
  3932 ;;Total ram usage:        0 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; Hardware stack levels required when called:    1
  3935 ;; This function calls:
  3936 ;;		_delay
  3937 ;; This function is called by:
  3938 ;;		_e2pext_r
  3939 ;;		_e2pext_w
  3940 ;;		_rtc_r
  3941 ;;		_rtc_w
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _i2c_stop
  3947  010A                     _i2c_stop:	
  3948                           
  3949                           ;i2c.c: 57: RA3=1;
  3950                           
  3951                           ;incstack = 0
  3952                           ; Regs used in _i2c_stop: [status,2+status,0+pclath+cstack]
  3953  010A  1283               	bcf	3,5	;RP0=0, select bank0
  3954  010B  1303               	bcf	3,6	;RP1=0, select bank0
  3955  010C  1585               	bsf	5,3	;volatile
  3956                           
  3957                           ;i2c.c: 58: RA4=0;
  3958  010D  1205               	bcf	5,4	;volatile
  3959                           
  3960                           ;i2c.c: 59: delay();
  3961  010E  20E6               	fcall	_delay
  3962                           
  3963                           ;i2c.c: 60: RA4=1;
  3964  010F  1283               	bcf	3,5	;RP0=0, select bank0
  3965  0110  1303               	bcf	3,6	;RP1=0, select bank0
  3966  0111  1605               	bsf	5,4	;volatile
  3967                           
  3968                           ;i2c.c: 61: delay();
  3969  0112  20E6               	fcall	_delay
  3970  0113  0008               	return
  3971  0114                     __end_of_i2c_stop:	
  3972                           
  3973                           	psect	text21
  3974  0100                     __ptext21:	
  3975 ;; *************** function _i2c_start *****************
  3976 ;; Defined at:
  3977 ;;		line 46 in file "i2c.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;		None
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;		None
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  1    wreg      void 
  3984 ;; Registers used:
  3985 ;;		status,2, status,0, pclath, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3991 ;;      Params:         0       0       0       0
  3992 ;;      Locals:         0       0       0       0
  3993 ;;      Temps:          0       0       0       0
  3994 ;;      Totals:         0       0       0       0
  3995 ;;Total ram usage:        0 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    1
  3998 ;; This function calls:
  3999 ;;		_delay
  4000 ;; This function is called by:
  4001 ;;		_e2pext_r
  4002 ;;		_e2pext_w
  4003 ;;		_rtc_r
  4004 ;;		_rtc_w
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           
  4009                           ;psect for function _i2c_start
  4010  0100                     _i2c_start:	
  4011                           
  4012                           ;i2c.c: 48: RA3=1;
  4013                           
  4014                           ;incstack = 0
  4015                           ; Regs used in _i2c_start: [status,2+status,0+pclath+cstack]
  4016  0100  1283               	bcf	3,5	;RP0=0, select bank0
  4017  0101  1303               	bcf	3,6	;RP1=0, select bank0
  4018  0102  1585               	bsf	5,3	;volatile
  4019                           
  4020                           ;i2c.c: 49: RA4=1;
  4021  0103  1605               	bsf	5,4	;volatile
  4022                           
  4023                           ;i2c.c: 50: delay();
  4024  0104  20E6               	fcall	_delay
  4025                           
  4026                           ;i2c.c: 51: RA4=0;
  4027  0105  1283               	bcf	3,5	;RP0=0, select bank0
  4028  0106  1303               	bcf	3,6	;RP1=0, select bank0
  4029  0107  1205               	bcf	5,4	;volatile
  4030                           
  4031                           ;i2c.c: 52: delay();
  4032  0108  20E6               	fcall	_delay
  4033  0109  0008               	return
  4034  010A                     __end_of_i2c_start:	
  4035                           
  4036                           	psect	text22
  4037  0522                     __ptext22:	
  4038 ;; *************** function _i2c_rb *****************
  4039 ;; Defined at:
  4040 ;;		line 84 in file "i2c.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  ack             1    wreg     unsigned char 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  ack             1    2[COMMON] unsigned char 
  4045 ;;  i               1    4[COMMON] unsigned char 
  4046 ;;  ret             1    3[COMMON] unsigned char 
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      unsigned char 
  4049 ;; Registers used:
  4050 ;;		wreg, status,2, status,0, pclath, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4056 ;;      Params:         0       0       0       0
  4057 ;;      Locals:         3       0       0       0
  4058 ;;      Temps:          2       0       0       0
  4059 ;;      Totals:         5       0       0       0
  4060 ;;Total ram usage:        5 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    1
  4063 ;; This function calls:
  4064 ;;		_delay
  4065 ;; This function is called by:
  4066 ;;		_e2pext_r
  4067 ;;		_rtc_r
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           
  4072                           ;psect for function _i2c_rb
  4073  0522                     _i2c_rb:	
  4074                           
  4075                           ;incstack = 0
  4076                           ; Regs used in _i2c_rb: [wreg+status,2+status,0+pclath+cstack]
  4077                           ;i2c_rb@ack stored from wreg
  4078  0522  00F2               	movwf	i2c_rb@ack
  4079                           
  4080                           ;i2c.c: 86: char i;
  4081                           ;i2c.c: 87: unsigned char ret=0;
  4082  0523  01F3               	clrf	i2c_rb@ret
  4083                           
  4084                           ;i2c.c: 89: RA3=0;
  4085  0524  1283               	bcf	3,5	;RP0=0, select bank0
  4086  0525  1303               	bcf	3,6	;RP1=0, select bank0
  4087  0526  1185               	bcf	5,3	;volatile
  4088                           
  4089                           ;i2c.c: 90: TRISA4=1;
  4090  0527  1683               	bsf	3,5	;RP0=1, select bank1
  4091  0528  1303               	bcf	3,6	;RP1=0, select bank1
  4092  0529  1605               	bsf	5,4	;volatile
  4093                           
  4094                           ;i2c.c: 91: RA4=1;
  4095  052A  1283               	bcf	3,5	;RP0=0, select bank0
  4096  052B  1303               	bcf	3,6	;RP1=0, select bank0
  4097  052C  1605               	bsf	5,4	;volatile
  4098                           
  4099                           ;i2c.c: 92: for(i=0;i<8;i++)
  4100  052D  01F4               	clrf	i2c_rb@i
  4101  052E  3008               	movlw	8
  4102  052F  0274               	subwf	i2c_rb@i,w
  4103  0530  1803               	btfsc	3,0
  4104  0531  2D51               	goto	l53
  4105  0532                     l52:	
  4106                           
  4107                           ;i2c.c: 93: {
  4108                           ;i2c.c: 94: RA3=1;
  4109  0532  1585               	bsf	5,3	;volatile
  4110                           
  4111                           ;i2c.c: 95: delay();
  4112  0533  20E6               	fcall	_delay
  4113                           
  4114                           ;i2c.c: 96: ret|=(RA4<<(7-i));
  4115  0534  3000               	movlw	0
  4116  0535  1283               	bcf	3,5	;RP0=0, select bank0
  4117  0536  1303               	bcf	3,6	;RP1=0, select bank0
  4118  0537  1A05               	btfsc	5,4	;volatile
  4119  0538  3001               	movlw	1
  4120  0539  00F0               	movwf	??_i2c_rb
  4121  053A  0374               	decf	i2c_rb@i,w
  4122  053B  3AFF               	xorlw	255
  4123  053C  3E07               	addlw	7
  4124  053D  3E01               	addlw	1
  4125  053E  2D41               	goto	u804
  4126  053F                     u805:	
  4127  053F  1003               	clrc
  4128  0540  0DF0               	rlf	??_i2c_rb,f
  4129  0541                     u804:	
  4130  0541  3EFF               	addlw	-1
  4131  0542  1D03               	skipz
  4132  0543  2D3F               	goto	u805
  4133  0544  0870               	movf	??_i2c_rb,w
  4134  0545  00F1               	movwf	??_i2c_rb+1
  4135  0546  0871               	movf	??_i2c_rb+1,w
  4136  0547  04F3               	iorwf	i2c_rb@ret,f
  4137                           
  4138                           ;i2c.c: 97: RA3=0;
  4139  0548  1185               	bcf	5,3	;volatile
  4140  0549  3001               	movlw	1
  4141  054A  00F0               	movwf	??_i2c_rb
  4142  054B  0870               	movf	??_i2c_rb,w
  4143  054C  07F4               	addwf	i2c_rb@i,f
  4144  054D  3008               	movlw	8
  4145  054E  0274               	subwf	i2c_rb@i,w
  4146  054F  1C03               	skipc
  4147  0550  2D32               	goto	l52
  4148  0551                     l53:	
  4149                           
  4150                           ;i2c.c: 98: }
  4151                           ;i2c.c: 99: TRISA4=0;
  4152  0551  1683               	bsf	3,5	;RP0=1, select bank1
  4153  0552  1303               	bcf	3,6	;RP1=0, select bank1
  4154  0553  1205               	bcf	5,4	;volatile
  4155                           
  4156                           ;i2c.c: 100: if(ack)
  4157  0554  0872               	movf	i2c_rb@ack,w
  4158  0555  1903               	btfsc	3,2
  4159  0556  2D5B               	goto	l54
  4160                           
  4161                           ;i2c.c: 101: RA4=0;
  4162  0557  1283               	bcf	3,5	;RP0=0, select bank0
  4163  0558  1303               	bcf	3,6	;RP1=0, select bank0
  4164  0559  1205               	bcf	5,4	;volatile
  4165  055A  2D5E               	goto	l1481
  4166  055B                     l54:	
  4167                           
  4168                           ;i2c.c: 102: else
  4169                           ;i2c.c: 103: RA4=1;
  4170  055B  1283               	bcf	3,5	;RP0=0, select bank0
  4171  055C  1303               	bcf	3,6	;RP1=0, select bank0
  4172  055D  1605               	bsf	5,4	;volatile
  4173  055E                     l1481:	
  4174                           
  4175                           ;i2c.c: 104: delay();
  4176  055E  20E6               	fcall	_delay
  4177                           
  4178                           ;i2c.c: 105: RA3=1;
  4179  055F  1283               	bcf	3,5	;RP0=0, select bank0
  4180  0560  1303               	bcf	3,6	;RP1=0, select bank0
  4181  0561  1585               	bsf	5,3	;volatile
  4182                           
  4183                           ;i2c.c: 106: delay();
  4184  0562  20E6               	fcall	_delay
  4185                           
  4186                           ;i2c.c: 107: RA3=0;
  4187  0563  1283               	bcf	3,5	;RP0=0, select bank0
  4188  0564  1303               	bcf	3,6	;RP1=0, select bank0
  4189  0565  1185               	bcf	5,3	;volatile
  4190                           
  4191                           ;i2c.c: 109: return ret;
  4192  0566  0873               	movf	i2c_rb@ret,w
  4193  0567  0008               	return
  4194  0568                     __end_of_i2c_rb:	
  4195                           
  4196                           	psect	text23
  4197  00E6                     __ptext23:	
  4198 ;; *************** function _delay *****************
  4199 ;; Defined at:
  4200 ;;		line 29 in file "i2c.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      void 
  4207 ;; Registers used:
  4208 ;;		None
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4214 ;;      Params:         0       0       0       0
  4215 ;;      Locals:         0       0       0       0
  4216 ;;      Temps:          0       0       0       0
  4217 ;;      Totals:         0       0       0       0
  4218 ;;Total ram usage:        0 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; This function calls:
  4221 ;;		Nothing
  4222 ;; This function is called by:
  4223 ;;		_i2c_start
  4224 ;;		_i2c_stop
  4225 ;;		_i2c_wb
  4226 ;;		_i2c_rb
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           
  4231                           ;psect for function _delay
  4232  00E6                     _delay:	
  4233                           
  4234                           ;incstack = 0
  4235                           ; Regs used in _delay: []
  4236  00E6  0000               	nop	;# 
  4237  00E7  0000               	nop	;# 
  4238  00E8  0000               	nop	;# 
  4239  00E9  0000               	nop	;# 
  4240  00EA  0008               	return
  4241  00EB                     __end_of_delay:	
  4242  007E                     btemp	set	126	;btemp
  4243  007E                     wtemp0	set	126


Data Sizes:
    Strings     268
    Constant    4
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     10      30
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    serial_tx_str@val	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_26(CODE[10]), STR_23(CODE[3]), STR_22(CODE[14]), STR_20(CODE[3]), 
		 -> STR_19(CODE[11]), STR_17(CODE[13]), STR_16(CODE[33]), 

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_25(CODE[14]), STR_24(CODE[4]), STR_21(CODE[17]), STR_18(CODE[16]), 
		 -> STR_15(CODE[9]), STR_14(CODE[16]), STR_13(CODE[15]), STR_12(CODE[13]), 
		 -> STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[8]), STR_8(CODE[17]), 
		 -> STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[14]), STR_4(CODE[11]), 
		 -> STR_3(CODE[3]), STR_2(CODE[10]), STR_1(CODE[10]), date(BANK0[10]), 
		 -> time(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_e2pext_w
    _tc_tecla->_atraso_ms
    _serial_tx_str->_serial_tx
    _serial_rx->_atraso_ms
    _rtc_r->_i2c_rb
    _lcd_str->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms
    _e2pext_w->_e2pext_r
    _e2pext_r->_i2c_rb

Critical Paths under _main in BANK0

    _main->_e2pext_w

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   18050
                                              7 BANK0      3     3      0
                          _atraso_ms
                           _e2pext_r
                           _e2pext_w
                           _i2c_init
                            _lcd_cmd
                            _lcd_dat
                           _lcd_init
                            _lcd_str
                              _rtc_r
                        _serial_init
                          _serial_rx
                          _serial_tx
                      _serial_tx_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (1) _tc_tecla                                             9     7      2    2327
                                              6 COMMON     4     2      2
                                              0 BANK0      5     5      0
                             ___bmul
                          _atraso_ms
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     251
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _serial_tx_str                                        4     2      2     483
                                              1 COMMON     4     2      2
                          _serial_tx
 ---------------------------------------------------------------------------------
 (2) _serial_tx                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _serial_rx                                            4     2      2    1644
                                              6 COMMON     4     2      2
                          _atraso_ms
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rtc_r                                                2     2      0     518
                                              5 COMMON     2     2      0
                               _getd
                               _getu
                             _i2c_rb
                          _i2c_start
                           _i2c_stop
                             _i2c_wb
 ---------------------------------------------------------------------------------
 (2) _getu                                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getd                                                 2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              4     2      2    2838
                                              7 COMMON     4     2      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0    1635
                                              6 COMMON     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    3158
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0    1635
                                              6 COMMON     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               3     3      0      90
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _atraso_ms                                            6     4      2    1523
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _e2pext_w                                            10     7      3    1087
                                             11 COMMON     3     0      3
                                              0 BANK0      7     7      0
                           _e2pext_r
                          _i2c_start
                           _i2c_stop
                             _i2c_wb
 ---------------------------------------------------------------------------------
 (2) _e2pext_r                                             6     4      2     476
                                              5 COMMON     6     4      2
                             _i2c_rb
                          _i2c_start
                           _i2c_stop
                             _i2c_wb
 ---------------------------------------------------------------------------------
 (2) _i2c_wb                                               3     3      0      90
                                              0 COMMON     3     3      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _i2c_stop                                             0     0      0       0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _i2c_start                                            0     0      0       0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _i2c_rb                                               5     5      0     114
                                              0 COMMON     5     5      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _atraso_ms
   _e2pext_r
     _i2c_rb
       _delay
     _i2c_start
       _delay
     _i2c_stop
       _delay
     _i2c_wb
       _delay
   _e2pext_w
     _e2pext_r
       _i2c_rb
         _delay
       _i2c_start
         _delay
       _i2c_stop
         _delay
       _i2c_wb
         _delay
     _i2c_start
       _delay
     _i2c_stop
       _delay
     _i2c_wb
       _delay
   _i2c_init
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_dat
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
       _atraso_ms
       _lcd_wr
   _lcd_str
     _lcd_dat
       _atraso_ms
       _lcd_wr
   _rtc_r
     _getd
     _getu
     _i2c_rb
       _delay
     _i2c_start
       _delay
     _i2c_stop
       _delay
     _i2c_wb
       _delay
   _serial_init
   _serial_rx
     _atraso_ms
   _serial_tx
   _serial_tx_str
     _serial_tx
   _tc_tecla
     ___bmul
     _atraso_ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      A      1E       3       37.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      2C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      2C      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 13 22:15:43 2019

                      l3 01B8                        l5 01C5                        pc 0002  
         ___bmul@product 0072              __CFG_CP$OFF 0000                       l52 0532  
                     l53 0551                       l54 055B                       l48 027E  
                     fsr 0004                      l203 03B2                      l162 022D  
                    l148 0119                      l270 05E7                      l191 0392  
                    l168 0247                      l169 024B                      l193 0388  
                    l281 07E3                      l290 07F8                      l196 03A7  
                    l198 039D                      _RA0 0028                      _RA1 0029  
                    _RA2 002A                      _RA3 002B                      _RA4 002C  
                    _RB3 0033                      _RB4 0034                      _RB5 0035  
                    _RB6 0036                      _RB7 0037             __CFG_CPD$OFF 0000  
                    u804 0541                      u805 053F                      u735 01BE  
                    u760 026E                      u754 0265                      u850 01F4  
                    u755 0263                      u844 01EB                      u925 02BF  
                    u845 01E9                      _RX9 00C6                      u885 0122  
                    u985 0241                      _TX9 04C6                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000  
                   l2003 075F                     l2021 0784                     l2031 079E  
                   l2015 0779                     l2043 07B8                     l1421 01D2  
                   l2055 07DE                     l2049 07C3                     l1507 01F7  
                   l1437 025C                     l1613 0199                     l1439 0271  
                   l1703 023B                     l1481 055E                     l1713 0251  
                   l1721 036D                     l1573 0141                     l1727 0372  
                   l1569 013B                     l1761 03D5                     l1691 0569  
                   l1771 03F1                     l1755 03C1                     l1931 067B  
                   l1589 029A                     l1765 03E2                     l1917 065B  
                   l1853 05BC                     l1845 05B3                     l1775 03F8  
                   l1951 06E6                     l1839 05A6                     l1769 03EE  
                   l1929 0669                     l1699 0230                     l1947 06DC  
                   l1859 05C9                     l1877 05FA                     l1869 05E1  
                   l1967 0703                     l1977 071A                     l1897 0624  
                   l1995 074D                     STR_1 04F6                     STR_2 04F6  
                   STR_3 051F                     STR_4 04D7                     STR_5 04A4  
                   STR_6 0437                     STR_7 0479                     STR_8 0437  
                   STR_9 0513                     _BRGH 04C2                     _CREN 00C4  
                   u1135 03E8                     _SPEN 00C7                     _TRMT 04C1  
                   _TXEN 04C5                     _SYNC 04C4                     _date 002A  
                   _getd 011E                     _getu 00EB                     _main 0589  
                   _time 0020                     btemp 007E                     start 0000  
             e2pext_r@ah 0079               e2pext_r@al 007A               e2pext_w@ah 0036  
             e2pext_w@al 0037               e2pext_w@nt 0038        ___bmul@multiplier 0073  
          __CFG_MCLRE$ON 0000         serial_rx@timeout 0076                    ?_getd 0070  
                  ?_getu 0070                    ?_main 0070                    STR_10 0500  
                  STR_11 04EC                    STR_20 04E9                    STR_12 04BF  
                  STR_13 0479                    STR_21 0448                    STR_22 0488  
                  STR_14 0469                    STR_23 04E9                    STR_15 050A  
                  STR_24 051B                    STR_16 0416                    STR_17 04B2  
                  STR_25 0496            __CFG_WDTE$OFF 0000                    STR_26 04E2  
                  STR_18 0459                    STR_19 04CC                    _CMCON 001F  
                  _RCREG 001A                    _SPBRG 0099                    _PORTA 0005  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TXREG 0019            __CFG_PWRTE$ON 0000          __end_of_lcd_dat 0198  
        __end_of_lcd_cmd 017E          __end_of_lcd_str 01B6                    _delay 00E6  
                  _linha 0412                    _rtc_r 02C6                    main@i 003D  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 007E              e2pext_r@ret 0078              e2pext_w@val 007D  
            e2pext_w@tmp 0039          __initialization 07F9             __end_of_getd 012B  
           __end_of_getu 00F0             __end_of_main 07F9         __end_of_i2c_init 00F8  
       __end_of_i2c_stop 0114         __end_of_e2pext_r 0164         __end_of_e2pext_w 02C6  
       serial_tx_str@val 0071                   ??_getd 0070                   ??_getu 0070  
                 ??_main 003B          tc_tecla@timeout 0076                   ?_delay 0070  
                 ?_rtc_r 0070                   _TRISA4 042C       __size_of_i2c_start 000A  
                 _i2c_rb 0522                   _i2c_wb 0253             ?_serial_init 0070  
       __end_of_lcd_init 0225                   ___bmul 0139                   _lcd_wr 01D9  
                 getd@nn 0071                ??_lcd_dat 0076                   getu@nn 0070  
              ??_lcd_cmd 0076         __end_of_tc_tecla 0400                ??_lcd_str 0079  
           e2pext_r@addr 0075             e2pext_w@addr 007B  __end_of__initialization 07FE  
    ___bmul@multiplicand 0070           __pcstackCOMMON 0070            __end_of_delay 00EB  
          __end_of_linha 0416    __end_of_serial_tx_str 0586            __end_of_rtc_r 0363  
      __end_of_i2c_start 010A                  ??_delay 0070                  ??_rtc_r 0075  
     __size_of_atraso_ms 0023               __pbssBANK0 0020                ?_i2c_init 0070  
              ?_i2c_stop 0070                ?_e2pext_r 0075                ?_e2pext_w 007B  
            tc_tecla@ret 0037              tc_tecla@tmp 0036                  ?_i2c_rb 0070  
                ?_i2c_wb 0070               __pmaintext 0589                  ?___bmul 0070  
                ?_lcd_wr 0070       __size_of_serial_rx 002E       __size_of_serial_tx 000A  
              ?_lcd_init 0070               __stringtab 0400                  i2c_rb@i 0074  
                i2c_wb@i 0072               ??_i2c_init 0070               ??_i2c_stop 0070  
             ??_e2pext_r 0077               ??_e2pext_w 0034                ?_tc_tecla 0076  
        __size_of_i2c_rb 0046          __size_of_i2c_wb 0035          __size_of___bmul 0011  
   __size_of_serial_init 000E        __end_of_atraso_ms 01D9          __size_of_lcd_wr 0025  
                __ptext1 0363                  __ptext2 0139                  __ptext3 0568  
                __ptext4 0114                  __ptext5 0225                  __ptext6 012B  
                __ptext7 02C6                  __ptext8 00EB                  __ptext9 011E  
                _lcd_dat 017E                  _lcd_cmd 0164                  _lcd_str 0198  
            serial_rx@to 0078                  lcd_wr@i 0072                  clrloop0 00F9  
                main@tmp 003C               ??_lcd_init 0077     end_of_initialization 07FE  
      __end_of_serial_rx 0253        __end_of_serial_tx 011E               ??_tc_tecla 0078  
              _RCSTAbits 0018             __pstringtext 0400               lcd_dat@val 0076  
             lcd_cmd@val 0076                i2c_rb@ack 0072                i2c_rb@ret 0073  
              i2c_wb@val 0071               lcd_str@str 0077           __end_of_i2c_rb 0568  
         __end_of_i2c_wb 0288           serial_tx_str@i 0074           __end_of___bmul 014A  
             atraso_ms@i 0073               atraso_ms@j 0075           __end_of_lcd_wr 01FE  
    start_initialization 07F9                _i2c_start 0100        __size_of_i2c_init 0008  
      __size_of_i2c_stop 000A        __size_of_e2pext_r 001A        __size_of_e2pext_w 003E  
               ??_i2c_rb 0070                 ??_i2c_wb 0070                 ??___bmul 0071  
               ??_lcd_wr 0070                ___latbits 0000            __pcstackBANK0 0034  
             ?_i2c_start 0070        __size_of_lcd_init 0027   __size_of_serial_tx_str 001E  
             tc_tecla@to 0034        __size_of_tc_tecla 009D                 ?_lcd_dat 0070  
               ?_lcd_cmd 0070                 ?_lcd_str 0077                _atraso_ms 01B6  
         __size_of_delay 0005           __size_of_rtc_r 009D           atraso_ms@valor 0070  
              clear_ram0 00F8                 _PIR1bits 000C            ??_serial_init 0070  
              _serial_rx 0225                _serial_tx 0114            _serial_tx_str 0568  
            __stringbase 0412               ?_atraso_ms 0070                lcd_wr@val 0071  
            ??_i2c_start 0070                 _i2c_init 00F0                 _i2c_stop 010A  
               _e2pext_r 014A                 _e2pext_w 0288               ?_serial_rx 0076  
             ?_serial_tx 0070           ?_serial_tx_str 0071      __end_of_serial_init 0139  
     __end_of__stringtab 0412         __size_of_lcd_dat 001A         __size_of_lcd_cmd 001A  
       __size_of_lcd_str 001E                tc_tecla@i 0038                 __ptext10 0198  
               __ptext11 017E                 __ptext20 010A                 __ptext12 01FE  
               __ptext21 0100                 __ptext13 0164                 __ptext22 0522  
               __ptext14 01D9                 __ptext23 00E6                 __ptext15 01B6  
               __ptext16 00F0                 __ptext17 0288                 __ptext18 014A  
               __ptext19 0253                 _lcd_init 01FE            __size_of_getd 000D  
          __size_of_getu 0005            __size_of_main 0270                 _tc_tecla 0363  
           serial_tx@val 0070                 lcd_str@i 007A              ??_atraso_ms 0072  
              stringcode 040A              ??_serial_rx 0078              ??_serial_tx 0070  
            _serial_init 012B                 rtc_r@tmp 0076          ??_serial_tx_str 0073  
               stringtab 0400  
