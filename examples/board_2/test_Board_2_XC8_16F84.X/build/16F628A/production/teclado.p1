Version 3.2 HI-TECH Software Intermediate Code
"164 C:\Program Files (x86)\Microchip\xc8\v1.45\include\pic16f84.h
[v _PORTA `Vuc ~T0 @X0 0 e@5 ]
"664
[v _RB7 `Vb ~T0 @X0 0 e@55 ]
"26 atraso.h
[v _atraso_ms `(v ~T0 @X0 0 ef1`ui ]
"662 C:\Program Files (x86)\Microchip\xc8\v1.45\include\pic16f84.h
[v _RB6 `Vb ~T0 @X0 0 e@54 ]
"660
[v _RB5 `Vb ~T0 @X0 0 e@53 ]
[; ;htc.h: 26: extern const char __xc8_OPTIM_SPEED;
[; ;htc.h: 28: extern double __fpnormalize(double);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;pic16f84.h: 50: extern volatile unsigned char INDF @ 0x000;
"52 C:\Program Files (x86)\Microchip\xc8\v1.45\include\pic16f84.h
[; ;pic16f84.h: 52: asm("INDF equ 00h");
[; <" INDF equ 00h ;# ">
[; ;pic16f84.h: 57: extern volatile unsigned char TMR0 @ 0x001;
"59
[; ;pic16f84.h: 59: asm("TMR0 equ 01h");
[; <" TMR0 equ 01h ;# ">
[; ;pic16f84.h: 64: extern volatile unsigned char PCL @ 0x002;
"66
[; ;pic16f84.h: 66: asm("PCL equ 02h");
[; <" PCL equ 02h ;# ">
[; ;pic16f84.h: 71: extern volatile unsigned char STATUS @ 0x003;
"73
[; ;pic16f84.h: 73: asm("STATUS equ 03h");
[; <" STATUS equ 03h ;# ">
[; ;pic16f84.h: 76: typedef union {
[; ;pic16f84.h: 77: struct {
[; ;pic16f84.h: 78: unsigned C :1;
[; ;pic16f84.h: 79: unsigned DC :1;
[; ;pic16f84.h: 80: unsigned Z :1;
[; ;pic16f84.h: 81: unsigned nPD :1;
[; ;pic16f84.h: 82: unsigned nTO :1;
[; ;pic16f84.h: 83: unsigned RP :2;
[; ;pic16f84.h: 84: unsigned IRP :1;
[; ;pic16f84.h: 85: };
[; ;pic16f84.h: 86: struct {
[; ;pic16f84.h: 87: unsigned :5;
[; ;pic16f84.h: 88: unsigned RP0 :1;
[; ;pic16f84.h: 89: unsigned RP1 :1;
[; ;pic16f84.h: 90: };
[; ;pic16f84.h: 91: struct {
[; ;pic16f84.h: 92: unsigned CARRY :1;
[; ;pic16f84.h: 93: unsigned :1;
[; ;pic16f84.h: 94: unsigned ZERO :1;
[; ;pic16f84.h: 95: };
[; ;pic16f84.h: 96: } STATUSbits_t;
[; ;pic16f84.h: 97: extern volatile STATUSbits_t STATUSbits @ 0x003;
[; ;pic16f84.h: 157: extern volatile unsigned char FSR @ 0x004;
"159
[; ;pic16f84.h: 159: asm("FSR equ 04h");
[; <" FSR equ 04h ;# ">
[; ;pic16f84.h: 164: extern volatile unsigned char PORTA @ 0x005;
"166
[; ;pic16f84.h: 166: asm("PORTA equ 05h");
[; <" PORTA equ 05h ;# ">
[; ;pic16f84.h: 169: typedef union {
[; ;pic16f84.h: 170: struct {
[; ;pic16f84.h: 171: unsigned RA0 :1;
[; ;pic16f84.h: 172: unsigned RA1 :1;
[; ;pic16f84.h: 173: unsigned RA2 :1;
[; ;pic16f84.h: 174: unsigned RA3 :1;
[; ;pic16f84.h: 175: unsigned RA4 :1;
[; ;pic16f84.h: 176: };
[; ;pic16f84.h: 177: } PORTAbits_t;
[; ;pic16f84.h: 178: extern volatile PORTAbits_t PORTAbits @ 0x005;
[; ;pic16f84.h: 208: extern volatile unsigned char PORTB @ 0x006;
"210
[; ;pic16f84.h: 210: asm("PORTB equ 06h");
[; <" PORTB equ 06h ;# ">
[; ;pic16f84.h: 213: typedef union {
[; ;pic16f84.h: 214: struct {
[; ;pic16f84.h: 215: unsigned RB0 :1;
[; ;pic16f84.h: 216: unsigned RB1 :1;
[; ;pic16f84.h: 217: unsigned RB2 :1;
[; ;pic16f84.h: 218: unsigned RB3 :1;
[; ;pic16f84.h: 219: unsigned RB4 :1;
[; ;pic16f84.h: 220: unsigned RB5 :1;
[; ;pic16f84.h: 221: unsigned RB6 :1;
[; ;pic16f84.h: 222: unsigned RB7 :1;
[; ;pic16f84.h: 223: };
[; ;pic16f84.h: 224: } PORTBbits_t;
[; ;pic16f84.h: 225: extern volatile PORTBbits_t PORTBbits @ 0x006;
[; ;pic16f84.h: 270: extern volatile unsigned char EEDATA @ 0x008;
"272
[; ;pic16f84.h: 272: asm("EEDATA equ 08h");
[; <" EEDATA equ 08h ;# ">
[; ;pic16f84.h: 277: extern volatile unsigned char EEADR @ 0x009;
"279
[; ;pic16f84.h: 279: asm("EEADR equ 09h");
[; <" EEADR equ 09h ;# ">
[; ;pic16f84.h: 284: extern volatile unsigned char PCLATH @ 0x00A;
"286
[; ;pic16f84.h: 286: asm("PCLATH equ 0Ah");
[; <" PCLATH equ 0Ah ;# ">
[; ;pic16f84.h: 289: typedef union {
[; ;pic16f84.h: 290: struct {
[; ;pic16f84.h: 291: unsigned PCLATH :5;
[; ;pic16f84.h: 292: };
[; ;pic16f84.h: 293: } PCLATHbits_t;
[; ;pic16f84.h: 294: extern volatile PCLATHbits_t PCLATHbits @ 0x00A;
[; ;pic16f84.h: 304: extern volatile unsigned char INTCON @ 0x00B;
"306
[; ;pic16f84.h: 306: asm("INTCON equ 0Bh");
[; <" INTCON equ 0Bh ;# ">
[; ;pic16f84.h: 309: typedef union {
[; ;pic16f84.h: 310: struct {
[; ;pic16f84.h: 311: unsigned RBIF :1;
[; ;pic16f84.h: 312: unsigned INTF :1;
[; ;pic16f84.h: 313: unsigned T0IF :1;
[; ;pic16f84.h: 314: unsigned RBIE :1;
[; ;pic16f84.h: 315: unsigned INTE :1;
[; ;pic16f84.h: 316: unsigned T0IE :1;
[; ;pic16f84.h: 317: unsigned EEIE :1;
[; ;pic16f84.h: 318: unsigned GIE :1;
[; ;pic16f84.h: 319: };
[; ;pic16f84.h: 320: struct {
[; ;pic16f84.h: 321: unsigned :2;
[; ;pic16f84.h: 322: unsigned TMR0IF :1;
[; ;pic16f84.h: 323: unsigned :2;
[; ;pic16f84.h: 324: unsigned TMR0IE :1;
[; ;pic16f84.h: 325: };
[; ;pic16f84.h: 326: } INTCONbits_t;
[; ;pic16f84.h: 327: extern volatile INTCONbits_t INTCONbits @ 0x00B;
[; ;pic16f84.h: 382: extern volatile unsigned char OPTION_REG @ 0x081;
"384
[; ;pic16f84.h: 384: asm("OPTION_REG equ 081h");
[; <" OPTION_REG equ 081h ;# ">
[; ;pic16f84.h: 387: typedef union {
[; ;pic16f84.h: 388: struct {
[; ;pic16f84.h: 389: unsigned PS :3;
[; ;pic16f84.h: 390: unsigned PSA :1;
[; ;pic16f84.h: 391: unsigned T0SE :1;
[; ;pic16f84.h: 392: unsigned T0CS :1;
[; ;pic16f84.h: 393: unsigned INTEDG :1;
[; ;pic16f84.h: 394: unsigned nRBPU :1;
[; ;pic16f84.h: 395: };
[; ;pic16f84.h: 396: struct {
[; ;pic16f84.h: 397: unsigned PS0 :1;
[; ;pic16f84.h: 398: unsigned PS1 :1;
[; ;pic16f84.h: 399: unsigned PS2 :1;
[; ;pic16f84.h: 400: };
[; ;pic16f84.h: 401: } OPTION_REGbits_t;
[; ;pic16f84.h: 402: extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;
[; ;pic16f84.h: 452: extern volatile unsigned char TRISA @ 0x085;
"454
[; ;pic16f84.h: 454: asm("TRISA equ 085h");
[; <" TRISA equ 085h ;# ">
[; ;pic16f84.h: 457: typedef union {
[; ;pic16f84.h: 458: struct {
[; ;pic16f84.h: 459: unsigned TRISA0 :1;
[; ;pic16f84.h: 460: unsigned TRISA1 :1;
[; ;pic16f84.h: 461: unsigned TRISA2 :1;
[; ;pic16f84.h: 462: unsigned TRISA3 :1;
[; ;pic16f84.h: 463: unsigned TRISA4 :1;
[; ;pic16f84.h: 464: };
[; ;pic16f84.h: 465: } TRISAbits_t;
[; ;pic16f84.h: 466: extern volatile TRISAbits_t TRISAbits @ 0x085;
[; ;pic16f84.h: 496: extern volatile unsigned char TRISB @ 0x086;
"498
[; ;pic16f84.h: 498: asm("TRISB equ 086h");
[; <" TRISB equ 086h ;# ">
[; ;pic16f84.h: 501: typedef union {
[; ;pic16f84.h: 502: struct {
[; ;pic16f84.h: 503: unsigned TRISB0 :1;
[; ;pic16f84.h: 504: unsigned TRISB1 :1;
[; ;pic16f84.h: 505: unsigned TRISB2 :1;
[; ;pic16f84.h: 506: unsigned TRISB3 :1;
[; ;pic16f84.h: 507: unsigned TRISB4 :1;
[; ;pic16f84.h: 508: unsigned TRISB5 :1;
[; ;pic16f84.h: 509: unsigned TRISB6 :1;
[; ;pic16f84.h: 510: unsigned TRISB7 :1;
[; ;pic16f84.h: 511: };
[; ;pic16f84.h: 512: } TRISBbits_t;
[; ;pic16f84.h: 513: extern volatile TRISBbits_t TRISBbits @ 0x086;
[; ;pic16f84.h: 558: extern volatile unsigned char EECON1 @ 0x088;
"560
[; ;pic16f84.h: 560: asm("EECON1 equ 088h");
[; <" EECON1 equ 088h ;# ">
[; ;pic16f84.h: 563: typedef union {
[; ;pic16f84.h: 564: struct {
[; ;pic16f84.h: 565: unsigned RD :1;
[; ;pic16f84.h: 566: unsigned WR :1;
[; ;pic16f84.h: 567: unsigned WREN :1;
[; ;pic16f84.h: 568: unsigned WRERR :1;
[; ;pic16f84.h: 569: unsigned EEIF :1;
[; ;pic16f84.h: 570: };
[; ;pic16f84.h: 571: } EECON1bits_t;
[; ;pic16f84.h: 572: extern volatile EECON1bits_t EECON1bits @ 0x088;
[; ;pic16f84.h: 602: extern volatile unsigned char EECON2 @ 0x089;
"604
[; ;pic16f84.h: 604: asm("EECON2 equ 089h");
[; <" EECON2 equ 089h ;# ">
[; ;pic16f84.h: 614: extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;
[; ;pic16f84.h: 616: extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;
[; ;pic16f84.h: 618: extern volatile __bit EEIE @ (((unsigned) &INTCON)*8) + 6;
[; ;pic16f84.h: 620: extern volatile __bit EEIF @ (((unsigned) &EECON1)*8) + 4;
[; ;pic16f84.h: 622: extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;
[; ;pic16f84.h: 624: extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;
[; ;pic16f84.h: 626: extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;
[; ;pic16f84.h: 628: extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;
[; ;pic16f84.h: 630: extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;
[; ;pic16f84.h: 632: extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;
[; ;pic16f84.h: 634: extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;
[; ;pic16f84.h: 636: extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;
[; ;pic16f84.h: 638: extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;
[; ;pic16f84.h: 640: extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;
[; ;pic16f84.h: 642: extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;
[; ;pic16f84.h: 644: extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;
[; ;pic16f84.h: 646: extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;
[; ;pic16f84.h: 648: extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;
[; ;pic16f84.h: 650: extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;
[; ;pic16f84.h: 652: extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;
[; ;pic16f84.h: 654: extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;
[; ;pic16f84.h: 656: extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;
[; ;pic16f84.h: 658: extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;
[; ;pic16f84.h: 660: extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;
[; ;pic16f84.h: 662: extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;
[; ;pic16f84.h: 664: extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;
[; ;pic16f84.h: 666: extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;
[; ;pic16f84.h: 668: extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;
[; ;pic16f84.h: 670: extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;
[; ;pic16f84.h: 672: extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;
[; ;pic16f84.h: 674: extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;
[; ;pic16f84.h: 676: extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;
[; ;pic16f84.h: 678: extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;
[; ;pic16f84.h: 680: extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;
[; ;pic16f84.h: 682: extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;
[; ;pic16f84.h: 684: extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;
[; ;pic16f84.h: 686: extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;
[; ;pic16f84.h: 688: extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;
[; ;pic16f84.h: 690: extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;
[; ;pic16f84.h: 692: extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;
[; ;pic16f84.h: 694: extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;
[; ;pic16f84.h: 696: extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;
[; ;pic16f84.h: 698: extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;
[; ;pic16f84.h: 700: extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;
[; ;pic16f84.h: 702: extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;
[; ;pic16f84.h: 704: extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;
[; ;pic16f84.h: 706: extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;
[; ;pic16f84.h: 708: extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;
[; ;pic16f84.h: 710: extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;
[; ;pic16f84.h: 712: extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;
[; ;pic16f84.h: 714: extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;
[; ;pic16f84.h: 716: extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;
[; ;pic16f84.h: 718: extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;
[; ;pic16f84.h: 720: extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;
[; ;pic16f84.h: 722: extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;
[; ;pic16f84.h: 724: extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;
[; ;pic16f84.h: 726: extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;
[; ;pic.h: 29: extern void __nop(void);
[; ;pic.h: 78: extern unsigned int flash_read(unsigned short addr);
[; ;pic.h: 142: extern void flash_erase(unsigned short addr);
[; ;eeprom_routines.h: 114: extern void eeprom_write(unsigned char addr, unsigned char value);
[; ;eeprom_routines.h: 115: extern unsigned char eeprom_read(unsigned char addr);
[; ;eeprom_routines.h: 116: extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
[; ;eeprom_routines.h: 117: extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);
[; ;pic.h: 153: extern __nonreentrant void _delay(unsigned long);
[; ;pic.h: 155: extern __nonreentrant void _delaywdt(unsigned long);
[; ;pic.h: 193: extern __bank0 unsigned char __resetbits;
[; ;pic.h: 194: extern __bank0 __bit __powerdown;
[; ;pic.h: 195: extern __bank0 __bit __timeout;
[; ;teclado.h: 36: unsigned char tc_tecla(unsigned int timeout);
[; ;atraso.h: 26: void atraso_ms(unsigned int valor);
"30 teclado.c
[v _linha `Cuc ~T0 @X0 -> 4 `i e ]
[i _linha
:U ..
-> -> 2 `i `uc
-> -> 4 `i `uc
-> -> 64 `i `uc
-> -> 128 `i `uc
..
]
[; ;teclado.c: 30: const unsigned char linha[4]= {0x02,0x04,0x40,0x80};
"32
[v _tc_tecla `(uc ~T0 @X0 1 ef1`ui ]
"33
{
[; ;teclado.c: 32: unsigned char tc_tecla(unsigned int timeout)
[; ;teclado.c: 33: {
[e :U _tc_tecla ]
"32
[v _timeout `ui ~T0 @X0 1 r1 ]
"33
[f ]
"34
[v _to `ui ~T0 @X0 1 a ]
[; ;teclado.c: 34: unsigned int to=0;
[e = _to -> -> 0 `i `ui ]
"35
[v _i `uc ~T0 @X0 1 a ]
"36
[v _ret `uc ~T0 @X0 1 a ]
[; ;teclado.c: 35: unsigned char i;
[; ;teclado.c: 36: unsigned char ret=0;
[e = _ret -> -> 0 `i `uc ]
"37
[v _tmp `uc ~T0 @X0 1 a ]
[; ;teclado.c: 37: unsigned char tmp=PORTA;
[e = _tmp _PORTA ]
[; ;teclado.c: 39: while(((to < timeout)||(!timeout))&&(!ret))
"39
[e $U 24  ]
[e :U 25 ]
[; ;teclado.c: 40: {
"40
{
[; ;teclado.c: 41: for(i=0;i<4;i++)
"41
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 4 `i 27  ]
[e $U 28  ]
"42
[e :U 27 ]
[; ;teclado.c: 42: {
{
[; ;teclado.c: 43: PORTA|=linha[i];
"43
[e =| _PORTA *U + &U _linha * -> _i `ux -> -> # *U &U _linha `ui `ux ]
[; ;teclado.c: 44: if(RB7){atraso_ms(20);if(RB7){while(RB7);ret= 1+(i*3);break;}};
"44
[e $ ! _RB7 30  ]
{
[e ( _atraso_ms (1 -> -> 20 `i `ui ]
[e $ ! _RB7 31  ]
{
[e $U 32  ]
[e :U 33 ]
[e :U 32 ]
[e $ _RB7 33  ]
[e :U 34 ]
[e = _ret -> + -> 1 `i * -> _i `i -> 3 `i `uc ]
[e $U 28  ]
}
[e :U 31 ]
}
[e :U 30 ]
[; ;teclado.c: 45: if(RB6){atraso_ms(20);if(RB6){while(RB6);ret= 2+(i*3);break;}};
"45
[e $ ! _RB6 35  ]
{
[e ( _atraso_ms (1 -> -> 20 `i `ui ]
[e $ ! _RB6 36  ]
{
[e $U 37  ]
[e :U 38 ]
[e :U 37 ]
[e $ _RB6 38  ]
[e :U 39 ]
[e = _ret -> + -> 2 `i * -> _i `i -> 3 `i `uc ]
[e $U 28  ]
}
[e :U 36 ]
}
[e :U 35 ]
[; ;teclado.c: 46: if(RB5){atraso_ms(20);if(RB5){while(RB5);ret= 3+(i*3);break;}};
"46
[e $ ! _RB5 40  ]
{
[e ( _atraso_ms (1 -> -> 20 `i `ui ]
[e $ ! _RB5 41  ]
{
[e $U 42  ]
[e :U 43 ]
[e :U 42 ]
[e $ _RB5 43  ]
[e :U 44 ]
[e = _ret -> + -> 3 `i * -> _i `i -> 3 `i `uc ]
[e $U 28  ]
}
[e :U 41 ]
}
[e :U 40 ]
[; ;teclado.c: 47: PORTA&=~linha[i];
"47
[e =& _PORTA -> ~ -> *U + &U _linha * -> _i `ux -> -> # *U &U _linha `ui `ux `i `uc ]
"48
}
"41
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 4 `i 27  ]
[e :U 28 ]
"48
}
[; ;teclado.c: 48: };
[; ;teclado.c: 49: atraso_ms(5);
"49
[e ( _atraso_ms (1 -> -> 5 `i `ui ]
[; ;teclado.c: 50: to+=5;
"50
[e =+ _to -> -> 5 `i `ui ]
"51
}
[e :U 24 ]
"39
[e $ && || < _to _timeout ! != _timeout -> -> 0 `i `ui ! != -> _ret `i -> -> -> 0 `i `uc `i 25  ]
[e :U 26 ]
[; ;teclado.c: 51: }
[; ;teclado.c: 53: if(!ret)ret=255;
"53
[e $ ! ! != -> _ret `i -> -> -> 0 `i `uc `i 45  ]
[e = _ret -> -> 255 `i `uc ]
[e :U 45 ]
[; ;teclado.c: 54: if(ret == 11)ret=0;
"54
[e $ ! == -> _ret `i -> 11 `i 46  ]
[e = _ret -> -> 0 `i `uc ]
[e :U 46 ]
[; ;teclado.c: 55: PORTA=tmp;
"55
[e = _PORTA _tmp ]
[; ;teclado.c: 56: return ret;
"56
[e ) _ret ]
[e $UE 23  ]
[; ;teclado.c: 57: }
"57
[e :UE 23 ]
}
